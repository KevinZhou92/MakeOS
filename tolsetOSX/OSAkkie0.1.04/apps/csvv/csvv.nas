[FORMAT "WCOFF"]
[INSTRSET "i486p"]
[OPTIMIZE 1]
[OPTION 1]
[BITS 32]
	EXTERN	__alloca
	EXTERN	_maxell_x
	EXTERN	_maxell_y
	EXTERN	_osak_getbuflen
	EXTERN	_api_cmdline
	EXTERN	_api_fopen
	EXTERN	_api_putstr0
	EXTERN	_api_end
	EXTERN	_api_fsize
	EXTERN	_api_fread
	EXTERN	_api_fclose
	EXTERN	_api_openwin
	EXTERN	_api_boxfilwin
	EXTERN	_api_linewin
	EXTERN	_api_getkey
	EXTERN	_api_putstrwin
[FILE "csvv.c"]
[SECTION .data]
	ALIGNB	4
_maxell_x:
	DD	7
	ALIGNB	4
_maxell_y:
	DD	16
LC0:
	DB	"File not found.",0x0A,0x00
LC1:
	DB	"Filesize is too big.",0x0A,0x00
LC2:
	DB	"CSV-Viewer",0x00
[SECTION .text]
	GLOBAL	_HariMain
_HariMain:
	PUSH	EBP
	MOV	EAX,366464
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	CALL	__alloca
	IMUL	EBX,DWORD [_maxell_x],82
	IMUL	EAX,DWORD [_maxell_y],18
	ADD	EBX,12
	ADD	EAX,52
	IMUL	EBX,EAX
	CALL	_osak_getbuflen
	LEA	EDX,DWORD [-204860+EBP]
	IMUL	EBX,EAX
	LEA	EAX,DWORD [16+EBX]
	CALL	__alloca
	LEA	EAX,DWORD [15+ESP]
	AND	EAX,-16
	MOV	DWORD [-366464+EBP],EAX
	LEA	EAX,DWORD [-366460+EBP]
	CMP	EAX,EDX
	JA	L76
L6:
	MOV	DWORD [EAX],-1
	ADD	EAX,4
	CMP	EAX,EDX
	JBE	L6
L76:
	PUSH	30
	LEA	EBX,DWORD [-44+EBP]
	PUSH	EBX
	MOV	DWORD [-204848+EBP],0
	MOV	DWORD [-204852+EBP],0
	MOV	DWORD [-204856+EBP],0
	CALL	_api_cmdline
	POP	EDX
	MOV	EAX,EBX
	POP	ECX
	CMP	BYTE [-44+EBP],32
	JLE	L78
L11:
	INC	EAX
	CMP	BYTE [EAX],32
	JG	L11
L78:
	CMP	BYTE [EAX],32
	JE	L16
L80:
	PUSH	EAX
	CALL	_api_fopen
	MOV	EBX,EAX
	POP	EAX
	TEST	EBX,EBX
	JNE	L17
	PUSH	LC0
	CALL	_api_putstr0
	CALL	_api_end
	POP	EDI
L17:
	PUSH	0
	PUSH	EBX
	CALL	_api_fsize
	POP	ECX
	POP	ESI
	CMP	EAX,204798
	MOV	DWORD [-204848+EBP],EAX
	JLE	L18
	PUSH	LC1
	CALL	_api_putstr0
	CALL	_api_end
	POP	EDX
L18:
	PUSH	EBX
	LEA	EAX,DWORD [-204844+EBP]
	PUSH	DWORD [-204848+EBP]
	PUSH	EAX
	CALL	_api_fread
	PUSH	EBX
	XOR	EBX,EBX
	CALL	_api_fclose
	XOR	ECX,ECX
	ADD	ESP,16
	MOV	DWORD [-366468+EBP],0
	CMP	BYTE [-204844+EBP],44
	JE	L19
	MOV	DWORD [-366460+EBP],0
L19:
	MOV	EDX,DWORD [-366468+EBP]
	CMP	EDX,DWORD [-204848+EBP]
	JGE	L21
	LEA	EDI,DWORD [-366460+EBP]
	XOR	ESI,ESI
L38:
	MOV	DL,BYTE [-204844+EBP+EBX*1]
	INC	EBX
	CMP	DL,34
	JE	L92
L23:
	TEST	ECX,ECX
	JNE	L28
	CMP	DL,44
	JE	L93
L28:
	CMP	DL,13
	JE	L94
L32:
	CMP	DL,10
	JE	L95
L20:
	CMP	EBX,DWORD [-204848+EBP]
	JL	L38
L21:
	IMUL	EAX,DWORD [_maxell_y],18
	PUSH	LC2
	ADD	EAX,52
	PUSH	-1
	INC	DWORD [-204856+EBP]
	PUSH	EAX
	INC	DWORD [-204852+EBP]
	IMUL	EAX,DWORD [_maxell_x],82
	ADD	EAX,12
	XOR	EBX,EBX
	PUSH	EAX
	PUSH	DWORD [-366464+EBP]
	CALL	_api_openwin
	PUSH	7
	IMUL	EDX,DWORD [_maxell_y],18
	ADD	EDX,42
	MOV	DWORD [_win],EAX
	PUSH	EDX
	IMUL	EDX,DWORD [_maxell_x],82
	ADD	EDX,6
	PUSH	EDX
	PUSH	42
	PUSH	6
	PUSH	EAX
	CALL	_api_boxfilwin
	ADD	ESP,44
	IMUL	EAX,DWORD [_maxell_x],82
	CMP	EBX,EAX
	JG	L83
L43:
	IMUL	EAX,DWORD [_maxell_y],18
	PUSH	15
	ADD	EAX,42
	PUSH	EAX
	LEA	EAX,DWORD [6+EBX]
	PUSH	EAX
	ADD	EBX,82
	PUSH	42
	PUSH	EAX
	PUSH	DWORD [_win]
	CALL	_api_linewin
	ADD	ESP,24
	IMUL	EAX,DWORD [_maxell_x],82
	CMP	EBX,EAX
	JLE	L43
L83:
	IMUL	EAX,DWORD [_maxell_y],18
	XOR	EBX,EBX
	CMP	EBX,EAX
	JG	L85
L48:
	IMUL	EDX,DWORD [_maxell_x],82
	PUSH	15
	LEA	EAX,DWORD [42+EBX]
	PUSH	EAX
	ADD	EDX,6
	PUSH	EDX
	ADD	EBX,18
	PUSH	EAX
	PUSH	6
	PUSH	DWORD [_win]
	CALL	_api_linewin
	ADD	ESP,24
	IMUL	EAX,DWORD [_maxell_y],18
	CMP	EBX,EAX
	JLE	L48
L85:
	LEA	EBX,DWORD [-366460+EBP]
	MOV	ESI,1
	PUSH	EBX
	MOV	EDI,1
	PUSH	1
	PUSH	1
	MOV	DWORD [-366472+EBP],1
	MOV	DWORD [-366468+EBP],1
	CALL	_PutCell
	PUSH	1
	PUSH	1
	PUSH	4
	CALL	_my_drawboxId
	PUSH	EBX
	PUSH	0
	PUSH	0
	CALL	_Putcellinfo
	ADD	ESP,36
L49:
	PUSH	1
	CALL	_api_getkey
	MOV	EDX,EAX
	POP	EAX
	CMP	EDX,180
	JE	L96
L52:
	CMP	EDX,182
	JE	L97
L56:
	CMP	EDX,184
	JE	L98
L60:
	CMP	EDX,178
	JE	L99
L64:
	CMP	EDX,185
	JE	L100
L68:
	CMP	EDX,179
	JE	L101
L71:
	TEST	EDX,EDX
	JNE	L49
	PUSH	EDI
	PUSH	DWORD [-366468+EBP]
	PUSH	4
	CALL	_my_drawboxId
	MOV	EDX,DWORD [-366468+EBP]
	LEA	EAX,DWORD [-366460+EBP]
	MOV	ECX,DWORD [-366472+EBP]
	PUSH	EAX
	LEA	EAX,DWORD [-2+EDI+ESI*1]
	PUSH	EAX
	LEA	EAX,DWORD [-2+EDX+ECX*1]
	PUSH	EAX
	CALL	_Putcellinfo
	ADD	ESP,24
	JMP	L49
L101:
	MOV	ECX,DWORD [_maxell_y]
	MOV	EAX,201
	SUB	EAX,ECX
	CMP	ESI,EAX
	JG	L71
	LEA	ESI,DWORD [-1+ECX+ESI*1]
	CMP	ESI,EAX
	JLE	L73
	PUSH	EDI
	MOV	ESI,202
	PUSH	DWORD [-366468+EBP]
	PUSH	15
	CALL	_my_drawboxId
	ADD	ESP,12
	MOV	EAX,DWORD [_maxell_y]
	SUB	ESI,EAX
	LEA	EDI,DWORD [-1+EAX]
L73:
	LEA	EAX,DWORD [-366460+EBP]
	PUSH	EAX
	PUSH	ESI
	PUSH	DWORD [-366472+EBP]
	CALL	_PutCell
	ADD	ESP,12
	XOR	EDX,EDX
	JMP	L71
L100:
	CMP	ESI,1
	JLE	L68
	MOV	EAX,ESI
	SUB	EAX,DWORD [_maxell_y]
	LEA	ESI,DWORD [1+EAX]
	TEST	ESI,ESI
	JLE	L102
L70:
	LEA	EAX,DWORD [-366460+EBP]
	PUSH	EAX
	PUSH	ESI
	PUSH	DWORD [-366472+EBP]
	CALL	_PutCell
	ADD	ESP,12
	XOR	EDX,EDX
	JMP	L68
L102:
	PUSH	EDI
	MOV	ESI,1
	PUSH	DWORD [-366468+EBP]
	PUSH	15
	MOV	EDI,1
	CALL	_my_drawboxId
	ADD	ESP,12
	JMP	L70
L99:
	MOV	EAX,DWORD [_maxell_y]
	DEC	EAX
	CMP	EDI,EAX
	JGE	L65
	PUSH	EDI
	INC	EDI
	PUSH	DWORD [-366468+EBP]
	PUSH	15
	CALL	_my_drawboxId
L91:
	XOR	EDX,EDX
	ADD	ESP,12
	JMP	L64
L65:
	LEA	EAX,DWORD [EDI+ESI*1]
	CMP	EAX,200
	JG	L64
	LEA	EAX,DWORD [-366460+EBP]
	INC	ESI
	PUSH	EAX
	PUSH	ESI
	PUSH	DWORD [-366472+EBP]
	CALL	_PutCell
	JMP	L91
L98:
	CMP	EDI,1
	JLE	L61
	PUSH	EDI
	DEC	EDI
	PUSH	DWORD [-366468+EBP]
	PUSH	15
	CALL	_my_drawboxId
L90:
	XOR	EDX,EDX
	ADD	ESP,12
	JMP	L60
L61:
	CMP	ESI,1
	JLE	L60
	LEA	EAX,DWORD [-366460+EBP]
	DEC	ESI
	PUSH	EAX
	PUSH	ESI
	PUSH	DWORD [-366472+EBP]
	CALL	_PutCell
	JMP	L90
L97:
	MOV	EAX,DWORD [_maxell_x]
	DEC	EAX
	CMP	DWORD [-366468+EBP],EAX
	JGE	L57
	PUSH	EDI
	PUSH	DWORD [-366468+EBP]
	PUSH	15
	CALL	_my_drawboxId
	INC	DWORD [-366468+EBP]
L89:
	XOR	EDX,EDX
	ADD	ESP,12
	JMP	L56
L57:
	MOV	EAX,DWORD [-366472+EBP]
	ADD	EAX,DWORD [-366468+EBP]
	CMP	EAX,200
	JG	L56
	LEA	EAX,DWORD [-366460+EBP]
	INC	DWORD [-366472+EBP]
	PUSH	EAX
	PUSH	ESI
	PUSH	DWORD [-366472+EBP]
	CALL	_PutCell
	JMP	L89
L96:
	CMP	DWORD [-366468+EBP],1
	JLE	L53
	PUSH	EDI
	PUSH	DWORD [-366468+EBP]
	PUSH	15
	CALL	_my_drawboxId
	DEC	DWORD [-366468+EBP]
L88:
	XOR	EDX,EDX
	ADD	ESP,12
	JMP	L52
L53:
	CMP	DWORD [-366472+EBP],1
	JLE	L52
	LEA	EAX,DWORD [-366460+EBP]
	DEC	DWORD [-366472+EBP]
	PUSH	EAX
	PUSH	ESI
	PUSH	DWORD [-366472+EBP]
	CALL	_PutCell
	JMP	L88
L95:
	CMP	BYTE [-204844+EBP+EBX*1],13
	JNE	L20
L31:
	MOV	EAX,DWORD [-204848+EBP]
	CMP	EBX,EAX
	JGE	L20
	MOV	EDX,DWORD [-366468+EBP]
	CMP	DWORD [-204856+EBP],EDX
	JGE	L34
	MOV	DWORD [-204856+EBP],EDX
L34:
	INC	EBX
	ADD	EDI,804
	ADD	ESI,201
	CMP	EBX,EAX
	MOV	DWORD [-366468+EBP],0
	JGE	L21
	MOV	AL,BYTE [-204844+EBP+EBX*1]
	INC	DWORD [-204852+EBP]
	CMP	AL,44
	JE	L36
	CMP	AL,10
	JE	L36
	CMP	AL,13
	JE	L36
	MOV	DWORD [EDI],EBX
L36:
	CMP	AL,34
	JNE	L20
L87:
	INC	ECX
	JMP	L20
L94:
	CMP	BYTE [-204844+EBP+EBX*1],10
	JNE	L32
	JMP	L31
L93:
	INC	DWORD [-366468+EBP]
	MOV	AL,BYTE [-204844+EBP+EBX*1]
	CMP	AL,44
	JE	L28
	CMP	AL,10
	JE	L28
	CMP	AL,13
	JE	L28
	MOV	EAX,DWORD [-366468+EBP]
	ADD	EAX,ESI
	MOV	DWORD [-366460+EBP+EAX*4],EBX
	JMP	L28
L92:
	CMP	EBX,1
	JE	L87
	TEST	ECX,ECX
	JE	L87
	MOV	AL,BYTE [-204844+EBP+EBX*1]
	CMP	AL,44
	JE	L27
	CMP	AL,10
	JE	L27
	CMP	AL,13
	JNE	L23
L27:
	DEC	ECX
	JMP	L23
L16:
	INC	EAX
	CMP	BYTE [EAX],32
	JE	L16
	JMP	L80
	GLOBAL	_setdec
_setdec:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	MOV	EDX,DWORD [8+EBP]
	MOV	ECX,DWORD [16+EBP]
	MOV	EBX,DWORD [12+EBP]
L104:
	MOV	EAX,EDX
	MOV	ESI,10
	CDQ
	IDIV	ESI
	ADD	EDX,48
	MOV	BYTE [ECX+EBX*1],DL
	MOV	EDX,EAX
	DEC	ECX
	TEST	EAX,EAX
	JE	L105
	TEST	ECX,ECX
	JNS	L104
L105:
	POP	EBX
	MOV	EAX,ECX
	POP	ESI
	POP	EBP
	RET
	GLOBAL	_GetCellData
_GetCellData:
	PUSH	EBP
	OR	EAX,-1
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	XOR	EDI,EDI
	MOV	EDX,DWORD [16+EBP]
	PUSH	EBX
	MOV	ESI,DWORD [12+EBP]
	XOR	EBX,EBX
	TEST	EDX,EDX
	JS	L109
	CMP	BYTE [161616+EDX+ESI*1],34
	JE	L126
L112:
	MOV	CL,BYTE [161616+ESI+EDX*1]
	INC	EDX
	CMP	EDX,DWORD [161612+ESI]
	JG	L113
	CMP	CL,13
	JE	L113
	CMP	CL,10
	JE	L113
	TEST	EDI,EDI
	JNE	L125
	CMP	CL,44
	JE	L113
L118:
	CMP	EBX,DWORD [20+EBP]
	JGE	L112
	CMP	CL,9
	JE	L127
	MOV	EAX,DWORD [8+EBP]
	MOV	BYTE [EBX+EAX*1],CL
L124:
	INC	EBX
	JMP	L112
L127:
	ADD	EBX,3
	JMP	L124
L113:
	MOV	EAX,EBX
L109:
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L125:
	CMP	CL,34
	JNE	L118
	MOV	AL,BYTE [161616+EDX+ESI*1]
	CMP	AL,44
	JE	L113
	CMP	AL,10
	JE	L113
	CMP	AL,13
	JE	L113
	CMP	AL,34
	JNE	L118
	MOV	AL,BYTE [161617+EDX+ESI*1]
	CMP	AL,44
	JE	L118
	CMP	AL,10
	JE	L118
	CMP	AL,13
	JE	L118
	INC	EDX
	JMP	L118
L126:
	INC	EDX
	MOV	EDI,1
	JMP	L112
	GLOBAL	_PutCell
_PutCell:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	XOR	ESI,ESI
	PUSH	EBX
	SUB	ESP,48
	MOV	EDI,DWORD [12+EBP]
	MOV	BYTE [-18+EBP],0
L133:
	MOV	BYTE [-28+EBP+ESI*1],32
	INC	ESI
	CMP	ESI,9
	JLE	L133
	MOV	ESI,1
	CMP	ESI,DWORD [_maxell_y]
	JGE	L168
	MOV	DWORD [-52+EBP],20
L138:
	PUSH	5
	LEA	EBX,DWORD [-28+EBP]
	PUSH	EBX
	INC	ESI
	PUSH	EDI
	INC	EDI
	CALL	_setdec
	PUSH	EBX
	PUSH	10
	PUSH	12
	PUSH	7
	PUSH	DWORD [-52+EBP]
	PUSH	2
	CALL	_putstr
	ADD	ESP,36
	ADD	DWORD [-52+EBP],18
	CMP	ESI,DWORD [_maxell_y]
	JL	L138
L168:
	XOR	ESI,ESI
L143:
	MOV	BYTE [-28+EBP+ESI*1],32
	INC	ESI
	CMP	ESI,9
	JLE	L143
	MOV	EAX,DWORD [8+EBP]
	MOV	ESI,1
	MOV	EDI,84
	DEC	EAX
L144:
	MOV	EBX,EAX
	CMP	EAX,25
	JLE	L147
	MOV	EDX,26
	MOV	ECX,EDX
	CDQ
	IDIV	ECX
	MOV	DWORD [-60+EBP],EAX
	MOV	AL,BYTE [-60+EBP]
	ADD	EAX,64
	MOV	BYTE [-24+EBP],AL
L147:
	MOV	EDX,26
	MOV	EAX,EBX
	MOV	ECX,EDX
	INC	ESI
	CDQ
	IDIV	ECX
	LEA	EAX,DWORD [65+EDX]
	MOV	BYTE [-23+EBP],AL
	LEA	EAX,DWORD [-28+EBP]
	PUSH	EAX
	PUSH	10
	PUSH	12
	PUSH	7
	PUSH	2
	PUSH	EDI
	ADD	EDI,82
	CALL	_putstr
	ADD	ESP,24
	LEA	EAX,DWORD [1+EBX]
	CMP	ESI,DWORD [_maxell_x]
	JL	L144
	MOV	EAX,1
	MOV	DWORD [-32+EBP],1
	CMP	EAX,DWORD [_maxell_y]
	JGE	L172
	MOV	DWORD [-48+EBP],20
L164:
	MOV	EDX,1
	MOV	DWORD [-36+EBP],1
	CMP	EDX,DWORD [_maxell_x]
	JGE	L174
	MOV	ECX,DWORD [8+EBP]
	DEC	ECX
	MOV	DWORD [-40+EBP],84
	MOV	DWORD [-44+EBP],ECX
L163:
	MOV	EAX,DWORD [12+EBP]
	MOV	EDX,DWORD [-32+EBP]
	MOV	EBX,DWORD [-44+EBP]
	XOR	ESI,ESI
	LEA	EDI,DWORD [-2+EDX+EAX*1]
L161:
	MOV	BYTE [-28+EBP+ESI*1],32
	INC	ESI
	CMP	ESI,9
	JLE	L161
	IMUL	EDI,EDI,201
	LEA	ECX,DWORD [-28+EBP]
	PUSH	ECX
	PUSH	10
	PUSH	7
	PUSH	0
	PUSH	DWORD [-48+EBP]
	PUSH	DWORD [-40+EBP]
	CALL	_putstr
	LEA	ECX,DWORD [-28+EBP]
	MOV	EDX,DWORD [16+EBP]
	LEA	EAX,DWORD [EBX+EDI*1]
	PUSH	10
	PUSH	DWORD [EDX+EAX*4]
	PUSH	EDX
	PUSH	ECX
	CALL	_GetCellData
	ADD	ESP,40
	TEST	EAX,EAX
	JS	L155
	LEA	EAX,DWORD [-28+EBP]
	PUSH	EAX
	PUSH	10
	PUSH	7
	PUSH	0
	PUSH	DWORD [-48+EBP]
	PUSH	DWORD [-40+EBP]
	CALL	_putstr
	ADD	ESP,24
L155:
	INC	DWORD [-36+EBP]
	INC	DWORD [-44+EBP]
	MOV	EDX,DWORD [-36+EBP]
	ADD	DWORD [-40+EBP],82
	CMP	EDX,DWORD [_maxell_x]
	JL	L163
L174:
	INC	DWORD [-32+EBP]
	MOV	ECX,DWORD [-32+EBP]
	ADD	DWORD [-48+EBP],18
	CMP	ECX,DWORD [_maxell_y]
	JL	L164
L172:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_Putcellinfo
_Putcellinfo:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	MOV	EDI,8
	PUSH	EBX
	MOV	ESI,8
	SUB	ESP,12
	XOR	EBX,EBX
	IMUL	ECX,DWORD [_maxell_x],82
	MOV	EAX,ECX
	MOV	DWORD [-16+EBP],ESP
	CDQ
	IDIV	ESI
	LEA	EAX,DWORD [19+EAX]
	AND	EAX,-4
	CALL	__alloca
	MOV	EAX,ECX
	CDQ
	IDIV	EDI
	LEA	ESI,DWORD [15+ESP]
	AND	ESI,-16
	CMP	EBX,EAX
	JGE	L186
L182:
	MOV	BYTE [ESI+EBX*1],32
	MOV	ECX,8
	IMUL	EDX,DWORD [_maxell_x],82
	MOV	EAX,EDX
	INC	EBX
	CDQ
	IDIV	ECX
	CMP	EBX,EAX
	JL	L182
L186:
	MOV	BYTE [ESI],40
	MOV	EDI,8
	MOV	BYTE [9+ESI],41
	IMUL	EAX,DWORD [_maxell_x],82
	CDQ
	IDIV	EDI
	MOV	BYTE [ESI+EAX*1],0
	PUSH	7
	PUSH	ESI
	MOV	EAX,DWORD [12+EBP]
	INC	EAX
	PUSH	EAX
	CALL	_setdec
	ADD	ESP,12
	MOV	EBX,EAX
	MOV	EDX,26
	MOV	EAX,DWORD [8+EBP]
	MOV	ECX,EDX
	CDQ
	IDIV	ECX
	MOV	DWORD [-24+EBP],EAX
	LEA	EAX,DWORD [65+EDX]
	MOV	BYTE [ESI+EBX*1],AL
	DEC	EBX
	CMP	DWORD [8+EBP],25
	JLE	L183
	MOV	AL,BYTE [-24+EBP]
	ADD	EAX,64
	MOV	BYTE [ESI+EBX*1],AL
L183:
	PUSH	8
	PUSH	41
	IMUL	EAX,DWORD [_maxell_x],82
	CDQ
	IDIV	EDI
	LEA	EAX,DWORD [6+EAX*8]
	PUSH	EAX
	PUSH	26
	PUSH	6
	PUSH	DWORD [_win]
	CALL	_api_boxfilwin
	PUSH	ESI
	IMUL	EAX,DWORD [_maxell_x],82
	CDQ
	IDIV	EDI
	PUSH	EAX
	PUSH	0
	PUSH	26
	PUSH	6
	PUSH	DWORD [_win]
	CALL	_api_putstrwin
	ADD	ESP,48
	IMUL	EAX,DWORD [_maxell_x],82
	CDQ
	IDIV	EDI
	SUB	EAX,12
	PUSH	EAX
	MOV	EDI,DWORD [12+EBP]
	MOV	EDX,DWORD [16+EBP]
	IMUL	EDI,EDI,201
	MOV	EAX,EDI
	ADD	EAX,DWORD [8+EBP]
	PUSH	DWORD [EDX+EAX*4]
	PUSH	EDX
	PUSH	ESI
	CALL	_GetCellData
	ADD	ESP,16
	TEST	EAX,EAX
	JS	L184
	MOV	BYTE [ESI+EAX*1],0
	PUSH	ESI
	PUSH	EAX
	PUSH	0
	PUSH	26
	PUSH	86
	PUSH	DWORD [_win]
	CALL	_api_putstrwin
	ADD	ESP,24
L184:
	MOV	ESP,DWORD [-16+EBP]
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_my_drawboxId
_my_drawboxId:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	EBX
	IMUL	ESI,DWORD [16+EBP],18
	IMUL	EBX,DWORD [12+EBP],82
	PUSH	DWORD [8+EBP]
	LEA	EAX,DWORD [42+ESI]
	LEA	EDI,DWORD [88+EBX]
	PUSH	EAX
	ADD	EBX,6
	PUSH	EDI
	MOV	DWORD [-16+EBP],EAX
	PUSH	EAX
	ADD	ESI,60
	PUSH	EBX
	PUSH	DWORD [_win]
	CALL	_api_linewin
	PUSH	DWORD [8+EBP]
	PUSH	ESI
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	DWORD [_win]
	CALL	_api_linewin
	ADD	ESP,48
	PUSH	DWORD [8+EBP]
	PUSH	ESI
	PUSH	EBX
	PUSH	DWORD [-16+EBP]
	PUSH	EBX
	PUSH	DWORD [_win]
	CALL	_api_linewin
	PUSH	DWORD [8+EBP]
	PUSH	ESI
	PUSH	EDI
	PUSH	DWORD [-16+EBP]
	PUSH	EDI
	PUSH	DWORD [_win]
	CALL	_api_linewin
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_putstr
_putstr:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	ESI
	PUSH	ESI
	MOV	EAX,DWORD [16+EBP]
	MOV	EDX,DWORD [28+EBP]
	MOV	DWORD [-16+EBP],EAX
	MOV	ESI,DWORD [8+EBP]
	MOV	EAX,DWORD [20+EBP]
	MOV	EBX,DWORD [12+EBP]
	MOV	EDI,DWORD [24+EBP]
	MOV	DWORD [-20+EBP],EDX
	CMP	EAX,7
	JE	L189
	PUSH	EAX
	LEA	EAX,DWORD [58+EBX]
	PUSH	EAX
	LEA	EAX,DWORD [6+ESI+EDI*8]
L191:
	PUSH	EAX
	LEA	EAX,DWORD [42+EBX]
	PUSH	EAX
	LEA	EAX,DWORD [6+ESI]
	PUSH	EAX
	PUSH	DWORD [_win]
	CALL	_api_boxfilwin
	MOV	EDX,DWORD [-16+EBP]
	MOV	EAX,DWORD [-20+EBP]
	MOV	DWORD [24+EBP],EDI
	MOV	DWORD [28+EBP],EAX
	MOV	DWORD [20+EBP],EDX
	LEA	EAX,DWORD [42+EBX]
	ADD	ESP,24
	MOV	DWORD [16+EBP],EAX
	LEA	EAX,DWORD [6+ESI]
	MOV	DWORD [12+EBP],EAX
	MOV	EAX,DWORD [_win]
	MOV	DWORD [8+EBP],EAX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_api_putstrwin
L189:
	LEA	EAX,DWORD [57+EBX]
	PUSH	7
	PUSH	EAX
	LEA	EAX,DWORD [5+ESI+EDI*8]
	JMP	L191
[SECTION .data]
	ALIGNB	4
_win:
	RESB	4
