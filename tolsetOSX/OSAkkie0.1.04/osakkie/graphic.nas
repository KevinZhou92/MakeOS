[FORMAT "WCOFF"]
[INSTRSET "i486p"]
[OPTIMIZE 1]
[OPTION 1]
[BITS 32]
	EXTERN	_table_rgb
	EXTERN	_table_rgb_osakkie
	EXTERN	_io_load_eflags
	EXTERN	_io_cli
	EXTERN	_io_out8
	EXTERN	_io_store_eflags
	EXTERN	_task_now
	EXTERN	_hankaku
	EXTERN	_minifnt
[FILE "graphic.c"]
[SECTION .data]
_table_rgb:
	DB	0
	DB	0
	DB	0
	DB	-1
	DB	0
	DB	0
	DB	0
	DB	-1
	DB	0
	DB	-1
	DB	-1
	DB	0
	DB	0
	DB	0
	DB	-1
	DB	-1
	DB	0
	DB	-1
	DB	0
	DB	-1
	DB	-1
	DB	-1
	DB	-1
	DB	-1
	DB	-58
	DB	-58
	DB	-58
	DB	-124
	DB	0
	DB	0
	DB	0
	DB	-124
	DB	0
	DB	-124
	DB	-124
	DB	0
	DB	0
	DB	0
	DB	-124
	DB	-124
	DB	0
	DB	-124
	DB	0
	DB	-124
	DB	-124
	DB	-124
	DB	-124
	DB	-124
_table_rgb_osakkie:
	DB	58
	DB	110
	DB	-91
	DB	0
	DB	-128
	DB	-1
[SECTION .text]
	GLOBAL	_init_palette
_init_palette:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,676
	CALL	_get_bpp
	CMP	EAX,8
	JE	L24
L1:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L24:
	MOV	DWORD [-672+EBP],0
	MOV	DWORD [-676+EBP],0
	MOV	DWORD [-680+EBP],0
L17:
	XOR	EDI,EDI
	XOR	ESI,ESI
	XOR	EBX,EBX
L16:
	XOR	EDX,EDX
	MOV	DWORD [-688+EBP],0
L15:
	MOV	EAX,DWORD [-680+EBP]
	MOV	CL,BYTE [-688+EBP]
	ADD	EAX,EBX
	MOV	DWORD [-684+EBP],EAX
	ADD	EAX,EDX
	IMUL	EAX,EAX,3
	INC	EDX
	MOV	BYTE [-668+EBP+EAX*1],CL
	MOV	ECX,ESI
	MOV	BYTE [-667+EBP+EAX*1],CL
	MOV	CL,BYTE [-676+EBP]
	MOV	BYTE [-666+EBP+EAX*1],CL
	ADD	DWORD [-688+EBP],51
	CMP	EDX,5
	JLE	L15
	INC	EDI
	ADD	ESI,51
	ADD	EBX,6
	CMP	EDI,5
	JLE	L16
	INC	DWORD [-672+EBP]
	ADD	DWORD [-676+EBP],51
	ADD	DWORD [-680+EBP],36
	CMP	DWORD [-672+EBP],5
	JLE	L17
	PUSH	_table_rgb
	PUSH	15
	PUSH	0
	CALL	_set_palette
	LEA	EAX,DWORD [-668+EBP]
	PUSH	EAX
	PUSH	231
	PUSH	16
	CALL	_set_palette
	PUSH	_table_rgb_osakkie
	PUSH	241
	PUSH	240
	CALL	_set_palette
	JMP	L1
	GLOBAL	_set_palette
_set_palette:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	ECX
	MOV	EBX,DWORD [8+EBP]
	MOV	EDI,DWORD [12+EBP]
	MOV	ESI,DWORD [16+EBP]
	CALL	_io_load_eflags
	MOV	DWORD [-16+EBP],EAX
	CALL	_io_cli
	PUSH	EBX
	PUSH	968
	CALL	_io_out8
	CMP	EBX,EDI
	POP	EAX
	POP	EDX
	JLE	L30
L32:
	MOV	EAX,DWORD [-16+EBP]
	MOV	DWORD [8+EBP],EAX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_io_store_eflags
L30:
	MOV	AL,BYTE [ESI]
	INC	EBX
	SHR	AL,2
	MOVZX	EAX,AL
	PUSH	EAX
	PUSH	969
	CALL	_io_out8
	MOV	AL,BYTE [1+ESI]
	SHR	AL,2
	MOVZX	EAX,AL
	PUSH	EAX
	PUSH	969
	CALL	_io_out8
	MOV	AL,BYTE [2+ESI]
	SHR	AL,2
	ADD	ESI,3
	MOVZX	EAX,AL
	PUSH	EAX
	PUSH	969
	CALL	_io_out8
	ADD	ESP,24
	CMP	EBX,EDI
	JLE	L30
	JMP	L32
	GLOBAL	_get_bpp
_get_bpp:
	PUSH	EBP
	MOVSX	EAX,BYTE [4082]
	MOV	EBP,ESP
	POP	EBP
	RET
[SECTION .data]
_pallet.0:
	DD	0
	DD	16711680
	DD	65280
	DD	16776960
	DD	255
	DD	16711935
	DD	65535
	DD	16777215
	DD	13027014
	DD	8650752
	DD	33792
	DD	8684544
	DD	132
	DD	8650884
	DD	33924
	DD	8684676
[SECTION .text]
	GLOBAL	_get_color
_get_color:
	PUSH	EBP
	XOR	ECX,ECX
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,16
	MOV	EAX,DWORD [8+EBP]
	MOV	EBX,DWORD [12+EBP]
	TEST	EAX,EAX
	JNE	L35
	MOVSX	EAX,BYTE [4082]
L35:
	CMP	EAX,1
	JE	L91
	CMP	EAX,8
	JE	L74
	CMP	EAX,16
	JE	L92
L59:
	ADD	ESP,16
	MOV	EAX,ECX
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L92:
	MOV	ECX,EBX
	MOV	EAX,EBX
	SAR	ECX,8
	SHR	EAX,5
	AND	ECX,63488
	AND	EAX,2016
	OR	ECX,EAX
	MOVZX	EAX,BL
	SAR	EAX,3
	OR	ECX,EAX
	JMP	L59
L74:
	CMP	EBX,DWORD [_pallet.0+ECX*4]
	JE	L59
	INC	ECX
	CMP	ECX,15
	JLE	L74
	MOV	ECX,240
	CMP	EBX,3829413
	JE	L59
	MOV	ECX,241
	CMP	EBX,33023
	JE	L59
	MOV	EDX,EBX
	MOV	ECX,51
	MOVZX	EAX,BH
	SAR	EDX,16
	ADD	EDX,EAX
	MOVZX	EAX,BL
	ADD	EDX,EAX
	MOV	EAX,EDX
	CDQ
	IDIV	ECX
	MOV	ECX,EAX
	JMP	L59
L91:
	CMP	EBX,15
	JA	L37
L43:
	CMP	EBX,ECX
	JE	L89
	INC	ECX
	CMP	ECX,15
	JLE	L43
	JMP	L59
L89:
	MOV	ECX,DWORD [_pallet.0+ECX*4]
	JMP	L59
L37:
	LEA	EAX,DWORD [-16+EBX]
	CMP	EAX,215
	JA	L45
	MOV	DWORD [-16+EBP],0
	MOV	DWORD [-20+EBP],0
L62:
	XOR	ESI,ESI
	MOV	DWORD [-28+EBP],0
L61:
	XOR	EDX,EDX
L60:
	MOV	EAX,DWORD [-28+EBP]
	MOV	EDI,DWORD [-20+EBP]
	ADD	EAX,EDX
	LEA	EDI,DWORD [16+EDI+EAX*1]
	CMP	EDI,EBX
	JE	L90
	INC	EDX
	CMP	EDX,5
	JLE	L60
	INC	ESI
	ADD	DWORD [-28+EBP],6
	CMP	ESI,5
	JLE	L61
	INC	DWORD [-16+EBP]
	ADD	DWORD [-20+EBP],36
	CMP	DWORD [-16+EBP],5
	JLE	L62
	JMP	L59
L90:
	SAL	ESI,8
	MOV	ECX,EDX
	SAL	ECX,16
	OR	ECX,ESI
	OR	ECX,DWORD [-16+EBP]
	JMP	L59
L45:
	CMP	EBX,240
	JE	L93
	CMP	EBX,241
	JNE	L59
	MOV	ECX,33023
	JMP	L59
L93:
	MOV	ECX,3829413
	JMP	L59
	GLOBAL	_boxfill
_boxfill:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	ECX
	PUSH	ECX
	MOV	ESI,DWORD [24+EBP]
	CALL	_get_bpp
	PUSH	DWORD [16+EBP]
	PUSH	EAX
	MOV	EBX,EAX
	CALL	_get_color
	CMP	EBX,8
	MOV	EDI,EAX
	POP	EAX
	POP	EDX
	JE	L139
	CMP	EBX,16
	JE	L140
	CMP	EBX,24
	JE	L141
L94:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L141:
	MOV	ECX,ESI
	CMP	ESI,DWORD [32+EBP]
	JG	L94
	MOV	EBX,DWORD [12+EBP]
	IMUL	EBX,ESI
L129:
	MOV	EDX,DWORD [20+EBP]
	CMP	EDX,DWORD [28+EBP]
	JG	L138
	LEA	EAX,DWORD [EDX+EBX*1]
	MOV	ESI,DWORD [8+EBP]
	LEA	EAX,DWORD [ESI+EAX*4]
L128:
	MOV	DWORD [EAX],EDI
	INC	EDX
	ADD	EAX,4
	CMP	EDX,DWORD [28+EBP]
	JLE	L128
L138:
	INC	ECX
	ADD	EBX,DWORD [12+EBP]
	CMP	ECX,DWORD [32+EBP]
	JLE	L129
	JMP	L94
L140:
	MOV	ECX,ESI
	CMP	ESI,DWORD [32+EBP]
	JG	L94
	MOV	EBX,DWORD [12+EBP]
	IMUL	EBX,ESI
L117:
	MOV	EDX,DWORD [20+EBP]
	CMP	EDX,DWORD [28+EBP]
	JG	L135
L116:
	LEA	EAX,DWORD [EDX+EBX*1]
	MOV	ESI,DWORD [8+EBP]
	INC	EDX
	MOV	WORD [ESI+EAX*2],DI
	CMP	EDX,DWORD [28+EBP]
	JLE	L116
L135:
	INC	ECX
	ADD	EBX,DWORD [12+EBP]
	CMP	ECX,DWORD [32+EBP]
	JLE	L117
	JMP	L94
L139:
	MOV	ECX,ESI
	CMP	ESI,DWORD [32+EBP]
	JG	L94
	MOV	EAX,DWORD [12+EBP]
	IMUL	EAX,ESI
	MOV	DWORD [-20+EBP],EAX
L105:
	MOV	EDX,DWORD [20+EBP]
	CMP	EDX,DWORD [28+EBP]
	JG	L132
L104:
	MOV	EBX,DWORD [-20+EBP]
	MOV	ESI,DWORD [8+EBP]
	ADD	EBX,EDX
	MOV	EAX,EDI
	INC	EDX
	MOV	BYTE [EBX+ESI*1],AL
	CMP	EDX,DWORD [28+EBP]
	JLE	L104
L132:
	MOV	EAX,DWORD [12+EBP]
	INC	ECX
	ADD	DWORD [-20+EBP],EAX
	CMP	ECX,DWORD [32+EBP]
	JLE	L105
	JMP	L94
	GLOBAL	_init_screen
_init_screen:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EAX,DWORD [12+EBP]
	MOV	EDX,DWORD [16+EBP]
	DEC	EDX
	PUSH	EDX
	LEA	EDX,DWORD [-1+EAX]
	PUSH	EDX
	PUSH	0
	PUSH	0
	PUSH	3829413
	PUSH	EAX
	PUSH	DWORD [8+EBP]
	CALL	_boxfill
	LEAVE
	RET
	GLOBAL	_putfont
_putfont:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	MOV	EDI,DWORD [28+EBP]
	CALL	_get_bpp
	PUSH	DWORD [24+EBP]
	PUSH	EAX
	MOV	EBX,EAX
	CALL	_get_color
	CMP	EBX,8
	MOV	ESI,EAX
	POP	EAX
	POP	EDX
	JE	L191
	CMP	EBX,16
	JE	L192
	CMP	EBX,24
	JE	L193
L143:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L193:
	XOR	EBX,EBX
L187:
	MOV	EAX,DWORD [20+EBP]
	MOV	EDX,DWORD [8+EBP]
	ADD	EAX,EBX
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,DWORD [16+EBP]
	LEA	ECX,DWORD [EDX+EAX*4]
	MOV	DL,BYTE [EBX+EDI*1]
	TEST	DL,DL
	JNS	L179
	MOV	DWORD [ECX],ESI
L179:
	MOV	AL,DL
	AND	EAX,64
	TEST	AL,AL
	JE	L180
	MOV	DWORD [4+ECX],ESI
L180:
	MOV	AL,DL
	AND	EAX,32
	TEST	AL,AL
	JE	L181
	MOV	DWORD [8+ECX],ESI
L181:
	MOV	AL,DL
	AND	EAX,16
	TEST	AL,AL
	JE	L182
	MOV	DWORD [12+ECX],ESI
L182:
	MOV	AL,DL
	AND	EAX,8
	TEST	AL,AL
	JE	L183
	MOV	DWORD [16+ECX],ESI
L183:
	MOV	AL,DL
	AND	EAX,4
	TEST	AL,AL
	JE	L184
	MOV	DWORD [20+ECX],ESI
L184:
	MOV	AL,DL
	AND	EAX,2
	TEST	AL,AL
	JE	L185
	MOV	DWORD [24+ECX],ESI
L185:
	AND	EDX,1
	TEST	DL,DL
	JE	L177
	MOV	DWORD [28+ECX],ESI
L177:
	INC	EBX
	CMP	EBX,15
	JLE	L187
	JMP	L143
L192:
	XOR	EBX,EBX
L172:
	MOV	EAX,DWORD [20+EBP]
	MOV	EDX,DWORD [8+EBP]
	ADD	EAX,EBX
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,DWORD [16+EBP]
	LEA	ECX,DWORD [EDX+EAX*2]
	MOV	DL,BYTE [EBX+EDI*1]
	TEST	DL,DL
	JNS	L164
	MOV	WORD [ECX],SI
L164:
	MOV	AL,DL
	AND	EAX,64
	TEST	AL,AL
	JE	L165
	MOV	WORD [2+ECX],SI
L165:
	MOV	AL,DL
	AND	EAX,32
	TEST	AL,AL
	JE	L166
	MOV	WORD [4+ECX],SI
L166:
	MOV	AL,DL
	AND	EAX,16
	TEST	AL,AL
	JE	L167
	MOV	WORD [6+ECX],SI
L167:
	MOV	AL,DL
	AND	EAX,8
	TEST	AL,AL
	JE	L168
	MOV	WORD [8+ECX],SI
L168:
	MOV	AL,DL
	AND	EAX,4
	TEST	AL,AL
	JE	L169
	MOV	WORD [10+ECX],SI
L169:
	MOV	AL,DL
	AND	EAX,2
	TEST	AL,AL
	JE	L170
	MOV	WORD [12+ECX],SI
L170:
	AND	EDX,1
	TEST	DL,DL
	JE	L162
	MOV	WORD [14+ECX],SI
L162:
	INC	EBX
	CMP	EBX,15
	JLE	L172
	JMP	L143
L191:
	XOR	EBX,EBX
L157:
	MOV	EAX,DWORD [20+EBP]
	MOV	EDX,DWORD [16+EBP]
	ADD	EAX,EBX
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,DWORD [8+EBP]
	LEA	ECX,DWORD [EDX+EAX*1]
	MOV	DL,BYTE [EBX+EDI*1]
	TEST	DL,DL
	JNS	L149
	MOV	EAX,ESI
	MOV	BYTE [ECX],AL
L149:
	MOV	AL,DL
	AND	EAX,64
	TEST	AL,AL
	JE	L150
	MOV	EAX,ESI
	MOV	BYTE [1+ECX],AL
L150:
	MOV	AL,DL
	AND	EAX,32
	TEST	AL,AL
	JE	L151
	MOV	EAX,ESI
	MOV	BYTE [2+ECX],AL
L151:
	MOV	AL,DL
	AND	EAX,16
	TEST	AL,AL
	JE	L152
	MOV	EAX,ESI
	MOV	BYTE [3+ECX],AL
L152:
	MOV	AL,DL
	AND	EAX,8
	TEST	AL,AL
	JE	L153
	MOV	EAX,ESI
	MOV	BYTE [4+ECX],AL
L153:
	MOV	AL,DL
	AND	EAX,4
	TEST	AL,AL
	JE	L154
	MOV	EAX,ESI
	MOV	BYTE [5+ECX],AL
L154:
	MOV	AL,DL
	AND	EAX,2
	TEST	AL,AL
	JE	L155
	MOV	EAX,ESI
	MOV	BYTE [6+ECX],AL
L155:
	AND	EDX,1
	TEST	DL,DL
	JE	L147
	MOV	EDX,ESI
	MOV	BYTE [7+ECX],DL
L147:
	INC	EBX
	CMP	EBX,15
	JLE	L157
	JMP	L143
	GLOBAL	_putfonts
_putfonts:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	ECX
	PUSH	ECX
	MOV	EDI,DWORD [16+EBP]
	MOV	ESI,DWORD [28+EBP]
	CALL	_task_now
	MOV	DWORD [-16+EBP],EAX
	MOV	EAX,DWORD [4072]
	MOV	EDX,DWORD [-16+EBP]
	MOV	DWORD [-20+EBP],EAX
	CMP	BYTE [189+EDX],0
	JNE	L195
	CMP	BYTE [ESI],0
	JNE	L200
L195:
	MOV	EAX,DWORD [-16+EBP]
	CMP	BYTE [189+EAX],1
	JE	L231
L201:
	MOV	EAX,DWORD [-16+EBP]
	CMP	BYTE [189+EAX],2
	JE	L232
L194:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L232:
	CMP	BYTE [ESI],0
	JE	L194
L227:
	MOV	EDX,DWORD [-16+EBP]
	MOV	AL,BYTE [190+EDX]
	TEST	AL,AL
	JNE	L223
	MOV	DL,BYTE [ESI]
	LEA	EAX,DWORD [127+EDX]
	CMP	AL,125
	JA	L224
	MOV	EAX,DWORD [-16+EBP]
	MOV	BYTE [190+EAX],DL
L226:
	INC	ESI
	ADD	EDI,8
	CMP	BYTE [ESI],0
	JNE	L227
	JMP	L194
L224:
	MOVZX	EAX,DL
	SAL	EAX,4
	ADD	EAX,DWORD [-20+EBP]
	PUSH	EAX
	PUSH	DWORD [24+EBP]
	PUSH	DWORD [20+EBP]
	PUSH	EDI
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_putfont
	ADD	ESP,24
	JMP	L226
L223:
	MOVZX	EBX,AL
	IMUL	EBX,EBX,94
	MOVZX	EAX,BYTE [ESI]
	MOV	EDX,DWORD [-16+EBP]
	LEA	EBX,DWORD [-15295+EAX+EBX*1]
	MOV	BYTE [190+EDX],0
	SAL	EBX,5
	ADD	EBX,DWORD [-20+EBP]
	LEA	EAX,DWORD [4096+EBX]
	ADD	EBX,4112
	PUSH	EAX
	LEA	EAX,DWORD [-8+EDI]
	PUSH	DWORD [24+EBP]
	PUSH	DWORD [20+EBP]
	PUSH	EAX
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_putfont
	PUSH	EBX
	PUSH	DWORD [24+EBP]
	PUSH	DWORD [20+EBP]
	PUSH	EDI
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_putfont
	ADD	ESP,48
	JMP	L226
L231:
	CMP	BYTE [ESI],0
	JE	L201
L217:
	MOV	EAX,DWORD [-16+EBP]
	MOV	DL,BYTE [190+EAX]
	TEST	DL,DL
	JNE	L206
	MOV	DL,BYTE [ESI]
	LEA	EAX,DWORD [127+EDX]
	CMP	AL,30
	JBE	L208
	LEA	EAX,DWORD [32+EDX]
	CMP	AL,28
	JA	L207
L208:
	MOV	EAX,DWORD [-16+EBP]
	MOV	BYTE [190+EAX],DL
L210:
	INC	ESI
	ADD	EDI,8
	CMP	BYTE [ESI],0
	JNE	L217
	JMP	L201
L207:
	MOVZX	EAX,DL
	SAL	EAX,4
	ADD	EAX,DWORD [-20+EBP]
	PUSH	EAX
	PUSH	DWORD [24+EBP]
	PUSH	DWORD [20+EBP]
	PUSH	EDI
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_putfont
	ADD	ESP,24
	JMP	L210
L206:
	LEA	EAX,DWORD [127+EDX]
	CMP	AL,30
	JA	L211
	MOVZX	EAX,DL
	LEA	ECX,DWORD [-258+EAX+EAX*1]
L212:
	MOV	DL,BYTE [ESI]
	LEA	EAX,DWORD [-64+EDX]
	CMP	AL,62
	JA	L213
	MOVZX	EAX,DL
	SUB	EAX,64
L214:
	IMUL	EBX,ECX,94
	MOV	EDX,DWORD [-16+EBP]
	ADD	EBX,EAX
	SAL	EBX,5
	MOV	BYTE [190+EDX],0
	ADD	EBX,DWORD [-20+EBP]
	LEA	EAX,DWORD [4096+EBX]
	ADD	EBX,4112
	PUSH	EAX
	LEA	EAX,DWORD [-8+EDI]
	PUSH	DWORD [24+EBP]
	PUSH	DWORD [20+EBP]
	PUSH	EAX
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_putfont
	PUSH	EBX
	PUSH	DWORD [24+EBP]
	PUSH	DWORD [20+EBP]
	PUSH	EDI
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_putfont
	ADD	ESP,48
	JMP	L210
L213:
	LEA	EAX,DWORD [-128+EDX]
	CMP	AL,30
	JA	L215
	MOVZX	EAX,DL
	SUB	EAX,65
	JMP	L214
L215:
	MOVZX	EAX,DL
	SUB	EAX,159
	INC	ECX
	JMP	L214
L211:
	MOVZX	EAX,DL
	LEA	ECX,DWORD [-386+EAX+EAX*1]
	JMP	L212
L200:
	MOVZX	EAX,BYTE [ESI]
	SAL	EAX,4
	INC	ESI
	ADD	EAX,_hankaku
	PUSH	EAX
	PUSH	DWORD [24+EBP]
	PUSH	DWORD [20+EBP]
	PUSH	EDI
	ADD	EDI,8
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_putfont
	ADD	ESP,24
	CMP	BYTE [ESI],0
	JNE	L200
	JMP	L195
[SECTION .data]
_data.1:
	DB	"ah.....hahahah.."
	DB	"hah....haaaaah.."
	DB	".hah..hahhhhhah."
	DB	"..hahhahaahaahah"
	DB	"...haaahahhahhah"
	DB	"....hhaaahahhhah"
	DB	"......hahaaahah."
	DB	"......hhahahah.."
	DB	".....hahahhhahah"
	DB	"....hahaahhhaaha"
	DB	".....hahahhhahah"
	DB	"......haahhhaah."
	DB	".....haaaaaaaaah"
	DB	".....hahahahahah"
	DB	"......hahahahah."
	DB	".......haaaaah.."
[SECTION .text]
	GLOBAL	_init_mouse_cursor
_init_mouse_cursor:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	DWORD [12+EBP]
	PUSH	16
	PUSH	16
	PUSH	_data.1
	PUSH	0
	PUSH	0
	PUSH	16
	PUSH	DWORD [8+EBP]
	CALL	_picdata
	LEAVE
	RET
	GLOBAL	_putminifont
_putminifont:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	MOV	EDI,DWORD [28+EBP]
	CALL	_get_bpp
	PUSH	DWORD [24+EBP]
	PUSH	EAX
	MOV	EBX,EAX
	CALL	_get_color
	CMP	EBX,8
	POP	ESI
	MOV	ECX,EAX
	POP	EAX
	JE	L277
	CMP	EBX,16
	JE	L278
	CMP	EBX,24
	JE	L279
L234:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L279:
	XOR	ESI,ESI
L272:
	MOV	EAX,DWORD [20+EBP]
	MOV	EDX,DWORD [8+EBP]
	ADD	EAX,ESI
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,DWORD [16+EBP]
	LEA	EBX,DWORD [EDX+EAX*4]
	MOV	DL,BYTE [ESI+EDI*1]
	MOV	AL,DL
	AND	EAX,32
	TEST	AL,AL
	JE	L266
	MOV	DWORD [EBX],ECX
L266:
	MOV	AL,DL
	AND	EAX,16
	TEST	AL,AL
	JE	L267
	MOV	DWORD [4+EBX],ECX
L267:
	MOV	AL,DL
	AND	EAX,8
	TEST	AL,AL
	JE	L268
	MOV	DWORD [8+EBX],ECX
L268:
	MOV	AL,DL
	AND	EAX,4
	TEST	AL,AL
	JE	L269
	MOV	DWORD [12+EBX],ECX
L269:
	MOV	AL,DL
	AND	EAX,2
	TEST	AL,AL
	JE	L270
	MOV	DWORD [16+EBX],ECX
L270:
	AND	EDX,1
	TEST	DL,DL
	JE	L264
	MOV	DWORD [20+EBX],ECX
L264:
	INC	ESI
	CMP	ESI,11
	JLE	L272
	JMP	L234
L278:
	XOR	ESI,ESI
L259:
	MOV	EAX,DWORD [20+EBP]
	MOV	EDX,DWORD [8+EBP]
	ADD	EAX,ESI
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,DWORD [16+EBP]
	LEA	EBX,DWORD [EDX+EAX*2]
	MOV	DL,BYTE [ESI+EDI*1]
	MOV	AL,DL
	AND	EAX,32
	TEST	AL,AL
	JE	L253
	MOV	WORD [EBX],CX
L253:
	MOV	AL,DL
	AND	EAX,16
	TEST	AL,AL
	JE	L254
	MOV	WORD [2+EBX],CX
L254:
	MOV	AL,DL
	AND	EAX,8
	TEST	AL,AL
	JE	L255
	MOV	WORD [4+EBX],CX
L255:
	MOV	AL,DL
	AND	EAX,4
	TEST	AL,AL
	JE	L256
	MOV	WORD [6+EBX],CX
L256:
	MOV	AL,DL
	AND	EAX,2
	TEST	AL,AL
	JE	L257
	MOV	WORD [8+EBX],CX
L257:
	AND	EDX,1
	TEST	DL,DL
	JE	L251
	MOV	WORD [10+EBX],CX
L251:
	INC	ESI
	CMP	ESI,11
	JLE	L259
	JMP	L234
L277:
	XOR	ESI,ESI
L246:
	MOV	EAX,DWORD [20+EBP]
	MOV	EDX,DWORD [16+EBP]
	ADD	EAX,ESI
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,DWORD [8+EBP]
	LEA	EBX,DWORD [EDX+EAX*1]
	MOV	DL,BYTE [ESI+EDI*1]
	MOV	AL,DL
	AND	EAX,32
	TEST	AL,AL
	JE	L240
	MOV	BYTE [EBX],CL
L240:
	MOV	AL,DL
	AND	EAX,16
	TEST	AL,AL
	JE	L241
	MOV	BYTE [1+EBX],CL
L241:
	MOV	AL,DL
	AND	EAX,8
	TEST	AL,AL
	JE	L242
	MOV	BYTE [2+EBX],CL
L242:
	MOV	AL,DL
	AND	EAX,4
	TEST	AL,AL
	JE	L243
	MOV	BYTE [3+EBX],CL
L243:
	MOV	AL,DL
	AND	EAX,2
	TEST	AL,AL
	JE	L244
	MOV	BYTE [4+EBX],CL
L244:
	AND	EDX,1
	TEST	DL,DL
	JE	L238
	MOV	BYTE [5+EBX],CL
L238:
	INC	ESI
	CMP	ESI,11
	JLE	L246
	JMP	L234
	GLOBAL	_putminifonts
_putminifonts:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	MOV	EDI,DWORD [24+EBP]
	MOV	EBX,DWORD [28+EBP]
	MOV	ESI,DWORD [16+EBP]
	CMP	BYTE [EBX],0
	JNE	L285
L287:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L285:
	MOVZX	EAX,BYTE [EBX]
	IMUL	EAX,EAX,12
	ADD	EAX,_minifnt
	INC	EBX
	PUSH	EAX
	PUSH	EDI
	PUSH	DWORD [20+EBP]
	PUSH	ESI
	ADD	ESI,6
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_putminifont
	ADD	ESP,24
	CMP	BYTE [EBX],0
	JNE	L285
	JMP	L287
[SECTION .data]
_naomi.2:
	DB	"ooooooooooooaaaaoooooooooooo"
	DB	"oooooooooaaaddddaaaooooooooo"
	DB	"ooooooooaddddddddddaoooooooo"
	DB	"oooooooaddddddddddddaooooooo"
	DB	"ooooooaddddddddddddddaoooooo"
	DB	"aooooadaaaaaaddaaaaaadaooooa"
	DB	"aoooaddaddddaddaddddaddaoooa"
	DB	"aoooaddaaaaaaddaaaaaaddaoooa"
	DB	"oaooaddaddddaddaddddaddaoooa"
	DB	"oaoadddaaaaaaddaaaaaadddaoao"
	DB	"oaoaddddddddddddddddddddaoao"
	DB	"ooaadddddaaddddddaadddddaaoo"
	DB	"oooadddddaaddddddaadddddaooo"
	DB	"oooadddddddddaadddddddddaooo"
	DB	"ooooaddddddaabbaaddddddaoooo"
	DB	"ooooaddddddabaabaddddddaoooo"
	DB	"ooooadddddabahhabadddddaoooo"
	DB	"oooooaddddabahhabaddddaooooo"
	DB	"ooooooaddddabaabaddddaoooooo"
	DB	"oooooooadddaabbaadddaooooooo"
	DB	"ooooooooaddddaaddddaoooooooo"
	DB	"oooooooooaaaddddaaaooooooooo"
	DB	"ooooooooaaooaaaaooaaoooooooo"
	DB	"oooooooaooooooooooooaooooooo"
	DB	"ooooooaooooooooooooooaoooooo"
	DB	"oooooaooooooooooooooooaooooo"
[SECTION .text]
	GLOBAL	_put_naomi
_put_naomi:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	-1
	PUSH	26
	PUSH	28
	PUSH	_naomi.2
	PUSH	0
	PUSH	0
	PUSH	28
	PUSH	DWORD [8+EBP]
	CALL	_picdata
	LEAVE
	RET
	GLOBAL	_picdata
_picdata:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,16
	CALL	_get_bpp
	MOV	EDI,EAX
	CMP	EAX,8
	JE	L352
	CMP	EAX,16
	JE	L353
	CMP	EAX,24
	JE	L354
L289:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L354:
	XOR	ESI,ESI
	CMP	ESI,DWORD [32+EBP]
	JGE	L289
	MOV	DWORD [-24+EBP],0
L339:
	MOV	EAX,DWORD [20+EBP]
	MOV	EDX,DWORD [8+EBP]
	ADD	EAX,ESI
	XOR	EBX,EBX
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,DWORD [16+EBP]
	CMP	EBX,DWORD [28+EBP]
	LEA	EAX,DWORD [EDX+EAX*4]
	MOV	DWORD [-20+EBP],EAX
	JGE	L348
L338:
	MOV	EAX,DWORD [-24+EBP]
	MOV	ECX,DWORD [24+EBP]
	ADD	EAX,EBX
	MOV	DL,BYTE [EAX+ECX*1]
	LEA	EAX,DWORD [-97+EDX]
	CMP	AL,15
	JBE	L355
	LEA	EAX,DWORD [-114+EDX]
	CMP	AL,1
	JBE	L356
	CMP	DL,46
	JE	L357
L331:
	INC	EBX
	CMP	EBX,DWORD [28+EBP]
	JL	L338
L348:
	MOV	ECX,DWORD [28+EBP]
	INC	ESI
	ADD	DWORD [-24+EBP],ECX
	CMP	ESI,DWORD [32+EBP]
	JL	L339
	JMP	L289
L357:
	MOV	EDX,DWORD [-20+EBP]
	MOV	EAX,DWORD [36+EBP]
	MOV	DWORD [EDX+EBX*4],EAX
	JMP	L331
L356:
	MOVZX	EAX,DL
	ADD	EAX,113
	PUSH	EAX
	PUSH	1
	CALL	_get_color
	PUSH	EAX
	PUSH	EDI
	CALL	_get_color
	MOV	ECX,DWORD [-20+EBP]
	MOV	DWORD [ECX+EBX*4],EAX
L351:
	ADD	ESP,16
	JMP	L331
L355:
	MOVZX	EAX,DL
	SUB	EAX,97
	PUSH	EAX
	PUSH	1
	CALL	_get_color
	PUSH	EAX
	PUSH	EDI
	CALL	_get_color
	MOV	EDX,DWORD [-20+EBP]
	MOV	DWORD [EDX+EBX*4],EAX
	JMP	L351
L353:
	XOR	ESI,ESI
	CMP	ESI,DWORD [32+EBP]
	JGE	L289
	MOV	DWORD [-28+EBP],0
L322:
	MOV	EAX,DWORD [20+EBP]
	MOV	ECX,DWORD [8+EBP]
	ADD	EAX,ESI
	XOR	EBX,EBX
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,DWORD [16+EBP]
	CMP	EBX,DWORD [28+EBP]
	LEA	EAX,DWORD [ECX+EAX*2]
	MOV	DWORD [-16+EBP],EAX
	JGE	L345
L321:
	MOV	EAX,DWORD [-28+EBP]
	MOV	ECX,DWORD [24+EBP]
	ADD	EAX,EBX
	MOV	DL,BYTE [EAX+ECX*1]
	LEA	EAX,DWORD [-97+EDX]
	CMP	AL,15
	JBE	L358
	LEA	EAX,DWORD [-114+EDX]
	CMP	AL,1
	JBE	L359
	CMP	DL,46
	JE	L360
L314:
	INC	EBX
	CMP	EBX,DWORD [28+EBP]
	JL	L321
L345:
	MOV	ECX,DWORD [28+EBP]
	INC	ESI
	ADD	DWORD [-28+EBP],ECX
	CMP	ESI,DWORD [32+EBP]
	JL	L322
	JMP	L289
L360:
	MOV	EAX,DWORD [-16+EBP]
	MOV	EDX,DWORD [36+EBP]
	MOV	WORD [EAX+EBX*2],DX
	JMP	L314
L359:
	MOVZX	EAX,DL
	ADD	EAX,113
	PUSH	EAX
	PUSH	1
	CALL	_get_color
	PUSH	EAX
	PUSH	EDI
	CALL	_get_color
	MOV	ECX,DWORD [-16+EBP]
	MOV	WORD [ECX+EBX*2],AX
L350:
	ADD	ESP,16
	JMP	L314
L358:
	MOVZX	EAX,DL
	SUB	EAX,97
	PUSH	EAX
	PUSH	1
	CALL	_get_color
	PUSH	EAX
	PUSH	EDI
	CALL	_get_color
	MOV	EDX,DWORD [-16+EBP]
	MOV	WORD [EDX+EBX*2],AX
	JMP	L350
L352:
	XOR	ESI,ESI
	CMP	ESI,DWORD [32+EBP]
	JGE	L289
	XOR	EDI,EDI
L305:
	MOV	EAX,DWORD [20+EBP]
	MOV	EDX,DWORD [16+EBP]
	ADD	EAX,ESI
	XOR	EBX,EBX
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,DWORD [8+EBP]
	CMP	EBX,DWORD [28+EBP]
	LEA	ECX,DWORD [EDX+EAX*1]
	JGE	L342
L304:
	MOV	EAX,DWORD [24+EBP]
	LEA	EDX,DWORD [EBX+EDI*1]
	MOV	DL,BYTE [EDX+EAX*1]
	LEA	EAX,DWORD [-97+EDX]
	CMP	AL,15
	JBE	L349
	LEA	EAX,DWORD [-113+EDX]
	CMP	AL,1
	JA	L301
	LEA	EAX,DWORD [127+EDX]
L349:
	MOV	BYTE [EBX+ECX*1],AL
L297:
	INC	EBX
	CMP	EBX,DWORD [28+EBP]
	JL	L304
L342:
	INC	ESI
	ADD	EDI,DWORD [28+EBP]
	CMP	ESI,DWORD [32+EBP]
	JL	L305
	JMP	L289
L301:
	CMP	DL,46
	JNE	L297
	MOV	DL,BYTE [36+EBP]
	MOV	BYTE [EBX+ECX*1],DL
	JMP	L297
