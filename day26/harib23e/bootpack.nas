[FORMAT "WCOFF"]
[INSTRSET "i486p"]
[OPTIMIZE 1]
[OPTION 1]
[BITS 32]
	EXTERN	_init_gdtidt
	EXTERN	_init_pic
	EXTERN	_io_sti
	EXTERN	_fifo32_init
	EXTERN	_init_pit
	EXTERN	_init_keyboard
	EXTERN	_enable_mouse
	EXTERN	_io_out8
	EXTERN	_memtest
	EXTERN	_memman_init
	EXTERN	_memman_free
	EXTERN	_init_palette
	EXTERN	_shtctl_init
	EXTERN	_task_init
	EXTERN	_task_run
	EXTERN	_sheet_alloc
	EXTERN	_memman_alloc_4k
	EXTERN	_sheet_setbuf
	EXTERN	_init_screen8
	EXTERN	_init_mouse_cursor8
	EXTERN	_sheet_slide
	EXTERN	_sheet_updown
	EXTERN	_fifo32_put
	EXTERN	_fifo32_status
	EXTERN	_io_cli
	EXTERN	_fifo32_get
	EXTERN	_mouse_decode
	EXTERN	_cons_putstr0
	EXTERN	_asm_end_app
	EXTERN	_keytable0.0
	EXTERN	_wait_KBC_sendready
	EXTERN	_keytable1.1
	EXTERN	_task_sleep
	EXTERN	_change_wtitle8
	EXTERN	_task_alloc
	EXTERN	_make_window8
	EXTERN	_make_textbox8
	EXTERN	_console_task
[FILE "bootpack.c"]
[SECTION .data]
_keytable0.0:
	DB	0
	DB	0
	DB	49
	DB	50
	DB	51
	DB	52
	DB	53
	DB	54
	DB	55
	DB	56
	DB	57
	DB	48
	DB	45
	DB	94
	DB	8
	DB	0
	DB	81
	DB	87
	DB	69
	DB	82
	DB	84
	DB	89
	DB	85
	DB	73
	DB	79
	DB	80
	DB	64
	DB	91
	DB	10
	DB	0
	DB	65
	DB	83
	DB	68
	DB	70
	DB	71
	DB	72
	DB	74
	DB	75
	DB	76
	DB	59
	DB	58
	DB	0
	DB	0
	DB	93
	DB	90
	DB	88
	DB	67
	DB	86
	DB	66
	DB	78
	DB	77
	DB	44
	DB	46
	DB	47
	DB	0
	DB	42
	DB	0
	DB	32
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	55
	DB	56
	DB	57
	DB	45
	DB	52
	DB	53
	DB	54
	DB	43
	DB	49
	DB	50
	DB	51
	DB	48
	DB	46
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	92
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	92
	DB	0
	DB	0
_keytable1.1:
	DB	0
	DB	0
	DB	33
	DB	34
	DB	35
	DB	36
	DB	37
	DB	38
	DB	39
	DB	40
	DB	41
	DB	126
	DB	61
	DB	126
	DB	8
	DB	0
	DB	81
	DB	87
	DB	69
	DB	82
	DB	84
	DB	89
	DB	85
	DB	73
	DB	79
	DB	80
	DB	96
	DB	123
	DB	10
	DB	0
	DB	65
	DB	83
	DB	68
	DB	70
	DB	71
	DB	72
	DB	74
	DB	75
	DB	76
	DB	43
	DB	42
	DB	0
	DB	0
	DB	125
	DB	90
	DB	88
	DB	67
	DB	86
	DB	66
	DB	78
	DB	77
	DB	60
	DB	62
	DB	63
	DB	0
	DB	42
	DB	0
	DB	32
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	55
	DB	56
	DB	57
	DB	45
	DB	52
	DB	53
	DB	54
	DB	43
	DB	49
	DB	50
	DB	51
	DB	48
	DB	46
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	95
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	124
	DB	0
	DB	0
LC1:
	DB	0x0A,"Break(mouse) :",0x0A,0x00
LC0:
	DB	0x0A,"Break(key) :",0x0A,0x00
[SECTION .text]
	GLOBAL	_HariMain
_HariMain:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	LEA	EBX,DWORD [-92+EBP]
	SUB	ESP,1112
	MOV	DWORD [-1080+EBP],0
	MOV	DWORD [-1076+EBP],0
	MOV	DWORD [-1052+EBP],-1
	MOV	DWORD [-1056+EBP],0
	MOV	DWORD [-1060+EBP],2147483647
	MOV	DWORD [-1064+EBP],0
	MOV	DWORD [-1088+EBP],0
	MOV	AL,BYTE [4081]
	SAR	AL,4
	MOV	EDX,EAX
	AND	EDX,7
	MOV	DWORD [-1092+EBP],EDX
	MOV	DWORD [-1096+EBP],-1
	MOV	DWORD [-1100+EBP],-1
	MOV	DWORD [-1104+EBP],-1
	MOV	DWORD [-1108+EBP],0
	MOV	DWORD [-1112+EBP],0
	CALL	_init_gdtidt
	CALL	_init_pic
	CALL	_io_sti
	LEA	EAX,DWORD [-636+EBP]
	PUSH	0
	PUSH	EAX
	PUSH	128
	PUSH	EBX
	CALL	_fifo32_init
	CALL	_init_pit
	PUSH	256
	PUSH	EBX
	CALL	_init_keyboard
	LEA	EAX,DWORD [-780+EBP]
	PUSH	EAX
	PUSH	512
	PUSH	EBX
	CALL	_enable_mouse
	ADD	ESP,36
	PUSH	248
	PUSH	33
	CALL	_io_out8
	PUSH	239
	PUSH	161
	CALL	_io_out8
	LEA	EAX,DWORD [-764+EBP]
	PUSH	0
	PUSH	EAX
	LEA	EAX,DWORD [-124+EBP]
	PUSH	32
	PUSH	EAX
	CALL	_fifo32_init
	ADD	ESP,32
	PUSH	-1073741825
	PUSH	4194304
	CALL	_memtest
	PUSH	3932160
	MOV	DWORD [-1068+EBP],EAX
	CALL	_memman_init
	PUSH	647168
	PUSH	4096
	PUSH	3932160
	CALL	_memman_free
	MOV	EAX,DWORD [-1068+EBP]
	SUB	EAX,4194304
	PUSH	EAX
	PUSH	4194304
	PUSH	3932160
	CALL	_memman_free
	ADD	ESP,36
	CALL	_init_palette
	MOVSX	EAX,WORD [4086]
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	DWORD [4088]
	PUSH	3932160
	CALL	_shtctl_init
	PUSH	3932160
	MOV	DWORD [-1040+EBP],EAX
	CALL	_task_init
	PUSH	2
	PUSH	1
	MOV	DWORD [-1084+EBP],EAX
	PUSH	EAX
	MOV	DWORD [-68+EBP],EAX
	CALL	_task_run
	ADD	ESP,32
	MOV	EDX,DWORD [-1040+EBP]
	MOV	DWORD [4068],EDX
	PUSH	EDX
	CALL	_sheet_alloc
	MOV	EDI,EAX
	MOVSX	EDX,WORD [4084]
	MOVSX	EAX,WORD [4086]
	IMUL	EDX,EAX
	PUSH	EDX
	PUSH	3932160
	CALL	_memman_alloc_4k
	PUSH	-1
	MOV	EBX,EAX
	MOVSX	EAX,WORD [4086]
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	EBX
	PUSH	EDI
	CALL	_sheet_setbuf
	ADD	ESP,32
	MOVSX	EAX,WORD [4086]
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	EBX
	LEA	EBX,DWORD [-1036+EBP]
	CALL	_init_screen8
	PUSH	DWORD [-1068+EBP]
	PUSH	DWORD [-1040+EBP]
	CALL	_open_console
	PUSH	DWORD [-1040+EBP]
	MOV	ESI,EAX
	MOV	DWORD [-1080+EBP],EAX
	MOV	DWORD [-1076+EBP],0
	CALL	_sheet_alloc
	PUSH	99
	PUSH	16
	PUSH	16
	MOV	DWORD [-1072+EBP],EAX
	PUSH	EBX
	PUSH	EAX
	CALL	_sheet_setbuf
	ADD	ESP,44
	PUSH	99
	PUSH	EBX
	MOV	EBX,2
	CALL	_init_mouse_cursor8
	MOVSX	EAX,WORD [4084]
	LEA	ECX,DWORD [-16+EAX]
	MOV	EAX,ECX
	CDQ
	IDIV	EBX
	MOV	DWORD [-1044+EBP],EAX
	MOVSX	EAX,WORD [4086]
	PUSH	0
	LEA	ECX,DWORD [-44+EAX]
	PUSH	0
	MOV	EAX,ECX
	PUSH	EDI
	CDQ
	IDIV	EBX
	MOV	DWORD [-1048+EBP],EAX
	CALL	_sheet_slide
	PUSH	4
	PUSH	32
	PUSH	ESI
	CALL	_sheet_slide
	ADD	ESP,32
	PUSH	DWORD [-1048+EBP]
	PUSH	DWORD [-1044+EBP]
	PUSH	DWORD [-1072+EBP]
	CALL	_sheet_slide
	PUSH	0
	PUSH	EDI
	MOV	EDI,ESI
	CALL	_sheet_updown
	PUSH	1
	PUSH	ESI
	CALL	_sheet_updown
	PUSH	2
	PUSH	DWORD [-1072+EBP]
	CALL	_sheet_updown
	ADD	ESP,36
	PUSH	ESI
	CALL	_keywin_on
	LEA	EDX,DWORD [-124+EBP]
	PUSH	237
	PUSH	EDX
	CALL	_fifo32_put
	LEA	EAX,DWORD [-124+EBP]
	PUSH	DWORD [-1092+EBP]
	PUSH	EAX
	CALL	_fifo32_put
	ADD	ESP,20
L2:
	LEA	EBX,DWORD [-124+EBP]
	PUSH	EBX
	CALL	_fifo32_status
	POP	ECX
	TEST	EAX,EAX
	JLE	L5
	CMP	DWORD [-1096+EBP],0
	JS	L68
L5:
	LEA	EBX,DWORD [-92+EBP]
	CALL	_io_cli
	PUSH	EBX
	CALL	_fifo32_status
	POP	EDX
	TEST	EAX,EAX
	JE	L69
	PUSH	EBX
	CALL	_fifo32_get
	MOV	ESI,EAX
	CALL	_io_sti
	POP	EBX
	CMP	DWORD [28+EDI],0
	JNE	L12
	MOV	EDX,DWORD [-1040+EBP]
	MOV	EAX,DWORD [16+EDX]
	MOV	EDI,DWORD [16+EDX+EAX*4]
	PUSH	EDI
	CALL	_keywin_on
	POP	ECX
L12:
	LEA	EAX,DWORD [-256+ESI]
	CMP	EAX,255
	JBE	L70
	LEA	EAX,DWORD [-512+ESI]
	CMP	EAX,255
	JA	L2
	MOV	EDX,ESI
	MOVZX	EAX,DL
	PUSH	EAX
	LEA	EAX,DWORD [-780+EBP]
	PUSH	EAX
	CALL	_mouse_decode
	POP	ECX
	POP	EBX
	TEST	EAX,EAX
	JE	L2
	MOV	EAX,DWORD [-772+EBP]
	MOV	EDX,DWORD [-776+EBP]
	ADD	DWORD [-1048+EBP],EAX
	ADD	DWORD [-1044+EBP],EDX
	JS	L71
L41:
	CMP	DWORD [-1048+EBP],0
	JS	L72
L42:
	MOVSX	EAX,WORD [4084]
	DEC	EAX
	CMP	DWORD [-1044+EBP],EAX
	JLE	L43
	MOV	DWORD [-1044+EBP],EAX
L43:
	MOVSX	EAX,WORD [4086]
	DEC	EAX
	CMP	DWORD [-1048+EBP],EAX
	JLE	L44
	MOV	DWORD [-1048+EBP],EAX
L44:
	MOV	EAX,DWORD [-1044+EBP]
	MOV	EDX,DWORD [-1048+EBP]
	MOV	DWORD [-1052+EBP],EAX
	MOV	DWORD [-1056+EBP],EDX
	TEST	DWORD [-768+EBP],1
	JNE	L73
	MOV	DWORD [-1100+EBP],-1
	CMP	DWORD [-1060+EBP],2147483647
	JE	L2
L64:
	PUSH	DWORD [-1064+EBP]
	PUSH	DWORD [-1060+EBP]
	PUSH	DWORD [-1112+EBP]
	CALL	_sheet_slide
	MOV	DWORD [-1060+EBP],2147483647
L65:
	ADD	ESP,12
	JMP	L2
L73:
	CMP	DWORD [-1100+EBP],0
	JS	L74
	MOV	EBX,DWORD [-1044+EBP]
	MOV	EAX,DWORD [-1108+EBP]
	SUB	EBX,DWORD [-1100+EBP]
	MOV	ESI,DWORD [-1048+EBP]
	SUB	ESI,DWORD [-1104+EBP]
	MOV	EDX,DWORD [-1048+EBP]
	LEA	EBX,DWORD [2+EBX+EAX*1]
	MOV	DWORD [-1104+EBP],EDX
	MOV	DWORD [-1060+EBP],EBX
	ADD	DWORD [-1064+EBP],ESI
	AND	DWORD [-1060+EBP],-4
	JMP	L2
L74:
	MOV	EAX,DWORD [-1040+EBP]
	MOV	EAX,DWORD [16+EAX]
	MOV	DWORD [-1120+EBP],EAX
	MOV	ECX,EAX
L67:
	DEC	ECX
	TEST	ECX,ECX
	JLE	L2
	MOV	EDX,DWORD [-1040+EBP]
	MOV	ESI,DWORD [-1048+EBP]
	MOV	EBX,DWORD [-1044+EBP]
	MOV	EDX,DWORD [20+EDX+ECX*4]
	MOV	DWORD [-1112+EBP],EDX
	SUB	ESI,DWORD [16+EDX]
	SUB	EBX,DWORD [12+EDX]
	JS	L67
	MOV	EAX,DWORD [4+EDX]
	CMP	EBX,EAX
	JGE	L67
	TEST	ESI,ESI
	JS	L67
	CMP	ESI,DWORD [8+EDX]
	JGE	L67
	IMUL	EAX,ESI
	MOV	DWORD [-1124+EBP],EAX
	MOV	EDX,DWORD [EDX]
	MOV	EAX,DWORD [-1124+EBP]
	ADD	EAX,EBX
	MOVZX	EAX,BYTE [EAX+EDX*1]
	MOV	EDX,DWORD [-1112+EBP]
	CMP	EAX,DWORD [20+EDX]
	JE	L67
	MOV	EAX,DWORD [-1120+EBP]
	DEC	EAX
	PUSH	EAX
	PUSH	EDX
	CALL	_sheet_updown
	CMP	DWORD [-1112+EBP],EDI
	POP	EAX
	POP	EDX
	JE	L53
	PUSH	EDI
	CALL	_keywin_off
	MOV	EDI,DWORD [-1112+EBP]
	PUSH	EDI
	CALL	_keywin_on
	POP	ECX
	POP	EAX
L53:
	CMP	EBX,2
	JLE	L54
	MOV	EDX,DWORD [-1112+EBP]
	MOV	EAX,DWORD [4+EDX]
	SUB	EAX,3
	CMP	EBX,EAX
	JGE	L54
	CMP	ESI,2
	JLE	L54
	CMP	ESI,20
	JG	L54
	MOV	EAX,DWORD [-1044+EBP]
	MOV	EDX,DWORD [-1048+EBP]
	MOV	DWORD [-1100+EBP],EAX
	MOV	DWORD [-1104+EBP],EDX
	MOV	EAX,DWORD [-1112+EBP]
	MOV	EDX,DWORD [-1112+EBP]
	MOV	EAX,DWORD [12+EAX]
	MOV	EDX,DWORD [16+EDX]
	MOV	DWORD [-1108+EBP],EAX
	MOV	DWORD [-1064+EBP],EDX
L54:
	MOV	EAX,DWORD [-1112+EBP]
	MOV	EDX,DWORD [4+EAX]
	LEA	EAX,DWORD [-21+EDX]
	CMP	EAX,EBX
	JG	L2
	LEA	EAX,DWORD [-5+EDX]
	CMP	EBX,EAX
	JGE	L2
	CMP	ESI,4
	JLE	L2
	CMP	ESI,18
	JG	L2
	MOV	EDX,DWORD [-1112+EBP]
	TEST	BYTE [28+EDX],16
	JE	L2
	MOV	EBX,DWORD [36+EDX]
	PUSH	LC1
	PUSH	DWORD [148+EBX]
	CALL	_cons_putstr0
	CALL	_io_cli
	LEA	EAX,DWORD [48+EBX]
	MOV	DWORD [84+EBX],EAX
	MOV	DWORD [76+EBX],_asm_end_app
	CALL	_io_sti
L63:
	POP	EAX
	POP	EDX
	JMP	L2
L72:
	MOV	DWORD [-1048+EBP],0
	JMP	L42
L71:
	MOV	DWORD [-1044+EBP],0
	JMP	L41
L70:
	CMP	ESI,383
	JG	L14
	CMP	DWORD [-1088+EBP],0
	JNE	L15
	MOV	AL,BYTE [_keytable0.0-256+ESI]
L66:
	MOV	BYTE [-60+EBP],AL
L17:
	MOV	DL,BYTE [-60+EBP]
	LEA	EAX,DWORD [-65+EDX]
	CMP	AL,25
	JA	L18
	TEST	DWORD [-1092+EBP],4
	JNE	L62
	CMP	DWORD [-1088+EBP],0
	JE	L20
L18:
	MOV	AL,BYTE [-60+EBP]
	TEST	AL,AL
	JE	L22
	MOVSX	EAX,AL
	ADD	EAX,256
	PUSH	EAX
	MOV	EAX,DWORD [36+EDI]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	POP	EAX
	POP	EDX
L22:
	CMP	ESI,271
	JE	L75
L23:
	CMP	ESI,298
	JE	L76
L25:
	CMP	ESI,310
	JE	L77
L26:
	CMP	ESI,426
	JE	L78
L27:
	CMP	ESI,438
	JE	L79
L28:
	CMP	ESI,314
	JE	L80
L29:
	CMP	ESI,325
	JE	L81
L30:
	CMP	ESI,326
	JE	L82
L31:
	CMP	ESI,315
	JE	L83
L32:
	CMP	ESI,316
	JE	L84
L34:
	CMP	ESI,343
	JE	L85
L35:
	CMP	ESI,506
	JE	L86
L36:
	CMP	ESI,510
	JNE	L2
	CALL	_wait_KBC_sendready
	PUSH	DWORD [-1096+EBP]
	PUSH	96
	CALL	_io_out8
	JMP	L63
L86:
	MOV	DWORD [-1096+EBP],-1
	JMP	L36
L85:
	MOV	EDX,DWORD [-1040+EBP]
	MOV	EAX,DWORD [16+EDX]
	DEC	EAX
	PUSH	EAX
	PUSH	DWORD [24+EDX]
	CALL	_sheet_updown
	POP	EAX
	POP	EDX
	JMP	L35
L84:
	CMP	DWORD [-1088+EBP],0
	JE	L34
	CMP	DWORD [-1076+EBP],0
	JNE	L34
	PUSH	DWORD [-1068+EBP]
	PUSH	DWORD [-1040+EBP]
	CALL	_open_console
	PUSH	4
	PUSH	32
	MOV	EBX,EAX
	PUSH	EAX
	MOV	DWORD [-1076+EBP],EAX
	CALL	_sheet_slide
	MOV	EAX,DWORD [-1040+EBP]
	PUSH	DWORD [16+EAX]
	PUSH	EBX
	CALL	_sheet_updown
	PUSH	EDI
	MOV	EDI,EBX
	CALL	_keywin_off
	ADD	ESP,32
	PUSH	EBX
	CALL	_keywin_on
	POP	ECX
	JMP	L34
L83:
	CMP	DWORD [-1088+EBP],0
	JE	L32
	MOV	EBX,DWORD [36+EDI]
	TEST	EBX,EBX
	JE	L32
	CMP	DWORD [52+EBX],0
	JE	L32
	PUSH	LC0
	PUSH	DWORD [148+EBX]
	CALL	_cons_putstr0
	CALL	_io_cli
	LEA	EAX,DWORD [48+EBX]
	MOV	DWORD [84+EBX],EAX
	MOV	DWORD [76+EBX],_asm_end_app
	CALL	_io_sti
	POP	EBX
	POP	EAX
	JMP	L32
L82:
	PUSH	237
	LEA	EBX,DWORD [-124+EBP]
	PUSH	EBX
	XOR	DWORD [-1092+EBP],1
	CALL	_fifo32_put
	PUSH	DWORD [-1092+EBP]
	PUSH	EBX
	CALL	_fifo32_put
	ADD	ESP,16
	JMP	L31
L81:
	PUSH	237
	LEA	EBX,DWORD [-124+EBP]
	PUSH	EBX
	XOR	DWORD [-1092+EBP],2
	CALL	_fifo32_put
	PUSH	DWORD [-1092+EBP]
	PUSH	EBX
	CALL	_fifo32_put
	ADD	ESP,16
	JMP	L30
L80:
	PUSH	237
	LEA	EBX,DWORD [-124+EBP]
	PUSH	EBX
	XOR	DWORD [-1092+EBP],4
	CALL	_fifo32_put
	PUSH	DWORD [-1092+EBP]
	PUSH	EBX
	CALL	_fifo32_put
	ADD	ESP,16
	JMP	L29
L79:
	AND	DWORD [-1088+EBP],-3
	JMP	L28
L78:
	AND	DWORD [-1088+EBP],-2
	JMP	L27
L77:
	OR	DWORD [-1088+EBP],2
	JMP	L26
L76:
	OR	DWORD [-1088+EBP],1
	JMP	L25
L75:
	PUSH	EDI
	CALL	_keywin_off
	MOV	ECX,DWORD [24+EDI]
	DEC	ECX
	POP	EAX
	JNE	L24
	MOV	EAX,DWORD [-1040+EBP]
	MOV	ECX,DWORD [16+EAX]
	DEC	ECX
L24:
	MOV	EDX,DWORD [-1040+EBP]
	MOV	EDI,DWORD [20+EDX+ECX*4]
	PUSH	EDI
	CALL	_keywin_on
	POP	EAX
	JMP	L23
L20:
	LEA	EAX,DWORD [32+EDX]
	MOV	BYTE [-60+EBP],AL
	JMP	L18
L62:
	CMP	DWORD [-1088+EBP],0
	JE	L18
	JMP	L20
L15:
	MOV	AL,BYTE [_keytable1.1-256+ESI]
	JMP	L66
L14:
	MOV	BYTE [-60+EBP],0
	JMP	L17
L69:
	CMP	DWORD [-1052+EBP],0
	JNS	L87
	CMP	DWORD [-1060+EBP],2147483647
	JNE	L88
	PUSH	DWORD [-1084+EBP]
	CALL	_task_sleep
	CALL	_io_sti
	POP	ESI
	JMP	L2
L88:
	CALL	_io_sti
	JMP	L64
L87:
	CALL	_io_sti
	PUSH	DWORD [-1056+EBP]
	PUSH	DWORD [-1052+EBP]
	PUSH	DWORD [-1072+EBP]
	CALL	_sheet_slide
	MOV	DWORD [-1052+EBP],-1
	JMP	L65
L68:
	PUSH	EBX
	CALL	_fifo32_get
	MOV	DWORD [-1096+EBP],EAX
	CALL	_wait_KBC_sendready
	PUSH	DWORD [-1096+EBP]
	PUSH	96
	CALL	_io_out8
	ADD	ESP,12
	JMP	L5
	GLOBAL	_keywin_off
_keywin_off:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	PUSH	0
	MOV	EBX,DWORD [8+EBP]
	PUSH	EBX
	CALL	_change_wtitle8
	TEST	BYTE [28+EBX],32
	POP	EAX
	POP	EDX
	JNE	L91
L89:
	MOV	EBX,DWORD [-4+EBP]
	LEAVE
	RET
L91:
	PUSH	3
	MOV	EAX,DWORD [36+EBX]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	POP	EBX
	POP	EAX
	JMP	L89
	GLOBAL	_keywin_on
_keywin_on:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	PUSH	1
	MOV	EBX,DWORD [8+EBP]
	PUSH	EBX
	CALL	_change_wtitle8
	TEST	BYTE [28+EBX],32
	POP	EAX
	POP	EDX
	JNE	L94
L92:
	MOV	EBX,DWORD [-4+EBP]
	LEAVE
	RET
L94:
	PUSH	2
	MOV	EAX,DWORD [36+EBX]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	POP	ECX
	POP	EBX
	JMP	L92
[SECTION .data]
LC2:
	DB	"console",0x00
[SECTION .text]
	GLOBAL	_open_console
_open_console:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	ECX
	PUSH	DWORD [8+EBP]
	CALL	_sheet_alloc
	PUSH	42240
	PUSH	3932160
	MOV	EBX,EAX
	CALL	_memman_alloc_4k
	MOV	ESI,EAX
	CALL	_task_alloc
	PUSH	512
	MOV	EDI,EAX
	PUSH	3932160
	CALL	_memman_alloc_4k
	PUSH	-1
	PUSH	165
	PUSH	256
	MOV	DWORD [-16+EBP],EAX
	PUSH	ESI
	PUSH	EBX
	CALL	_sheet_setbuf
	ADD	ESP,40
	PUSH	0
	PUSH	LC2
	PUSH	165
	PUSH	256
	PUSH	ESI
	CALL	_make_window8
	PUSH	0
	PUSH	128
	PUSH	240
	PUSH	28
	PUSH	8
	PUSH	EBX
	CALL	_make_textbox8
	ADD	ESP,44
	PUSH	65536
	PUSH	3932160
	CALL	_memman_alloc_4k
	ADD	EAX,65524
	MOV	DWORD [100+EDI],EAX
	MOV	DWORD [76+EDI],_console_task
	MOV	DWORD [116+EDI],8
	MOV	DWORD [120+EDI],16
	MOV	DWORD [124+EDI],8
	MOV	DWORD [128+EDI],8
	MOV	DWORD [132+EDI],8
	MOV	DWORD [136+EDI],8
	MOV	DWORD [4+EAX],EBX
	MOV	EDX,DWORD [100+EDI]
	MOV	EAX,DWORD [12+EBP]
	MOV	DWORD [8+EDX],EAX
	PUSH	2
	PUSH	2
	PUSH	EDI
	CALL	_task_run
	LEA	EAX,DWORD [16+EDI]
	MOV	DWORD [36+EBX],EDI
	OR	DWORD [28+EBX],32
	PUSH	EDI
	PUSH	DWORD [-16+EBP]
	PUSH	128
	PUSH	EAX
	CALL	_fifo32_init
	LEA	ESP,DWORD [-12+EBP]
	MOV	EAX,EBX
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
