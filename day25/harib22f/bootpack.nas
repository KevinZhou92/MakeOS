[FORMAT "WCOFF"]
[INSTRSET "i486p"]
[OPTIMIZE 1]
[OPTION 1]
[BITS 32]
	EXTERN	_init_gdtidt
	EXTERN	_init_pic
	EXTERN	_io_sti
	EXTERN	_fifo32_init
	EXTERN	_init_pit
	EXTERN	_init_keyboard
	EXTERN	_enable_mouse
	EXTERN	_io_out8
	EXTERN	_memtest
	EXTERN	_memman_init
	EXTERN	_memman_free
	EXTERN	_init_palette
	EXTERN	_shtctl_init
	EXTERN	_task_init
	EXTERN	_task_run
	EXTERN	_sheet_alloc
	EXTERN	_memman_alloc_4k
	EXTERN	_sheet_setbuf
	EXTERN	_init_screen8
	EXTERN	_make_window8
	EXTERN	_make_textbox8
	EXTERN	_task_alloc
	EXTERN	_console_task
	EXTERN	_timer_alloc
	EXTERN	_timer_init
	EXTERN	_timer_settime
	EXTERN	_init_mouse_cursor8
	EXTERN	_sheet_slide
	EXTERN	_sheet_updown
	EXTERN	_fifo32_put
	EXTERN	_fifo32_status
	EXTERN	_io_cli
	EXTERN	_fifo32_get
	EXTERN	_boxfill8
	EXTERN	_sheet_refresh
	EXTERN	_mouse_decode
	EXTERN	_cons_putstr0
	EXTERN	_asm_end_app
	EXTERN	_keytable0.0
	EXTERN	_wait_KBC_sendready
	EXTERN	_putfonts8_asc_sht
	EXTERN	_keytable1.1
	EXTERN	_task_sleep
	EXTERN	_change_wtitle8
[FILE "bootpack.c"]
[SECTION .data]
_keytable0.0:
	DB	0
	DB	0
	DB	49
	DB	50
	DB	51
	DB	52
	DB	53
	DB	54
	DB	55
	DB	56
	DB	57
	DB	48
	DB	45
	DB	94
	DB	0
	DB	0
	DB	81
	DB	87
	DB	69
	DB	82
	DB	84
	DB	89
	DB	85
	DB	73
	DB	79
	DB	80
	DB	64
	DB	91
	DB	0
	DB	0
	DB	65
	DB	83
	DB	68
	DB	70
	DB	71
	DB	72
	DB	74
	DB	75
	DB	76
	DB	59
	DB	58
	DB	0
	DB	0
	DB	93
	DB	90
	DB	88
	DB	67
	DB	86
	DB	66
	DB	78
	DB	77
	DB	44
	DB	46
	DB	47
	DB	0
	DB	42
	DB	0
	DB	32
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	55
	DB	56
	DB	57
	DB	45
	DB	52
	DB	53
	DB	54
	DB	43
	DB	49
	DB	50
	DB	51
	DB	48
	DB	46
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	92
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	92
	DB	0
	DB	0
_keytable1.1:
	DB	0
	DB	0
	DB	33
	DB	34
	DB	35
	DB	36
	DB	37
	DB	38
	DB	39
	DB	40
	DB	41
	DB	126
	DB	61
	DB	126
	DB	0
	DB	0
	DB	81
	DB	87
	DB	69
	DB	82
	DB	84
	DB	89
	DB	85
	DB	73
	DB	79
	DB	80
	DB	96
	DB	123
	DB	0
	DB	0
	DB	65
	DB	83
	DB	68
	DB	70
	DB	71
	DB	72
	DB	74
	DB	75
	DB	76
	DB	43
	DB	42
	DB	0
	DB	0
	DB	125
	DB	90
	DB	88
	DB	67
	DB	86
	DB	66
	DB	78
	DB	77
	DB	60
	DB	62
	DB	63
	DB	0
	DB	42
	DB	0
	DB	32
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	55
	DB	56
	DB	57
	DB	45
	DB	52
	DB	53
	DB	54
	DB	43
	DB	49
	DB	50
	DB	51
	DB	48
	DB	46
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	95
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	124
	DB	0
	DB	0
LC0:
	DB	"console",0x00
LC1:
	DB	"task_a",0x00
LC4:
	DB	0x0A,"Break(mouse) :",0x0A,0x00
LC3:
	DB	0x0A,"Break(key) :",0x0A,0x00
LC2:
	DB	" ",0x00
[SECTION .text]
	GLOBAL	_HariMain
_HariMain:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	LEA	EBX,DWORD [-92+EBP]
	SUB	ESP,1128
	MOV	DWORD [-1108+EBP],0
	MOV	AL,BYTE [4081]
	SAR	AL,4
	MOV	EDX,EAX
	AND	EDX,7
	MOV	DWORD [-1112+EBP],EDX
	MOV	DWORD [-1116+EBP],-1
	MOV	DWORD [-1120+EBP],-1
	MOV	DWORD [-1124+EBP],-1
	MOV	DWORD [-1128+EBP],0
	CALL	_init_gdtidt
	CALL	_init_pic
	CALL	_io_sti
	LEA	EAX,DWORD [-636+EBP]
	PUSH	0
	PUSH	EAX
	PUSH	128
	PUSH	EBX
	CALL	_fifo32_init
	CALL	_init_pit
	PUSH	256
	PUSH	EBX
	CALL	_init_keyboard
	LEA	EAX,DWORD [-780+EBP]
	PUSH	EAX
	PUSH	512
	PUSH	EBX
	CALL	_enable_mouse
	ADD	ESP,36
	PUSH	248
	PUSH	33
	CALL	_io_out8
	PUSH	239
	PUSH	161
	CALL	_io_out8
	LEA	EAX,DWORD [-764+EBP]
	PUSH	0
	PUSH	EAX
	LEA	EAX,DWORD [-124+EBP]
	PUSH	32
	PUSH	EAX
	CALL	_fifo32_init
	ADD	ESP,32
	PUSH	-1073741825
	PUSH	4194304
	CALL	_memtest
	PUSH	3932160
	MOV	DWORD [-1088+EBP],EAX
	CALL	_memman_init
	PUSH	647168
	PUSH	4096
	PUSH	3932160
	CALL	_memman_free
	MOV	EAX,DWORD [-1088+EBP]
	SUB	EAX,4194304
	PUSH	EAX
	PUSH	4194304
	PUSH	3932160
	CALL	_memman_free
	ADD	ESP,36
	CALL	_init_palette
	MOVSX	EAX,WORD [4086]
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	DWORD [4088]
	PUSH	3932160
	CALL	_shtctl_init
	PUSH	3932160
	MOV	DWORD [-1064+EBP],EAX
	CALL	_task_init
	PUSH	2
	PUSH	1
	MOV	DWORD [-1100+EBP],EAX
	PUSH	EAX
	MOV	DWORD [-68+EBP],EAX
	CALL	_task_run
	ADD	ESP,32
	MOV	ECX,DWORD [-1064+EBP]
	MOV	DWORD [4068],ECX
	PUSH	ECX
	CALL	_sheet_alloc
	MOVSX	EDX,WORD [4086]
	MOV	DWORD [-1092+EBP],EAX
	MOVSX	EAX,WORD [4084]
	IMUL	EAX,EDX
	PUSH	EAX
	PUSH	3932160
	CALL	_memman_alloc_4k
	PUSH	-1
	MOV	EBX,EAX
	MOVSX	EAX,WORD [4086]
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	EBX
	PUSH	DWORD [-1092+EBP]
	CALL	_sheet_setbuf
	ADD	ESP,32
	MOVSX	EAX,WORD [4086]
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	EBX
	CALL	_init_screen8
	ADD	ESP,12
	MOV	DWORD [-1076+EBP],1
	XOR	EDI,EDI
L6:
	PUSH	DWORD [-1064+EBP]
	LEA	EBX,DWORD [-1052+EBP]
	CALL	_sheet_alloc
	PUSH	42240
	LEA	ESI,DWORD [-1060+EBP]
	PUSH	3932160
	MOV	DWORD [-1044+EBP+EDI*1],EAX
	CALL	_memman_alloc_4k
	MOV	DWORD [EBX+EDI*1],EAX
	PUSH	-1
	PUSH	165
	PUSH	256
	PUSH	EAX
	PUSH	DWORD [-1044+EBP+EDI*1]
	CALL	_sheet_setbuf
	ADD	ESP,32
	PUSH	0
	PUSH	LC0
	PUSH	165
	PUSH	256
	PUSH	DWORD [EBX+EDI*1]
	CALL	_make_window8
	PUSH	0
	PUSH	128
	PUSH	240
	PUSH	28
	PUSH	8
	PUSH	DWORD [-1044+EBP+EDI*1]
	CALL	_make_textbox8
	ADD	ESP,44
	CALL	_task_alloc
	MOV	EBX,EAX
	MOV	DWORD [ESI+EDI*1],EAX
	PUSH	65536
	PUSH	3932160
	CALL	_memman_alloc_4k
	MOV	EDX,DWORD [-1044+EBP+EDI*1]
	ADD	EAX,65524
	MOV	DWORD [100+EBX],EAX
	MOV	EAX,DWORD [ESI+EDI*1]
	MOV	ECX,DWORD [100+EAX]
	MOV	DWORD [76+EAX],_console_task
	MOV	DWORD [116+EAX],8
	MOV	DWORD [120+EAX],16
	MOV	DWORD [124+EAX],8
	MOV	DWORD [128+EAX],8
	MOV	DWORD [132+EAX],8
	MOV	DWORD [136+EAX],8
	MOV	DWORD [4+ECX],EDX
	MOV	ECX,DWORD [-1088+EBP]
	MOV	EDX,DWORD [100+EAX]
	MOV	DWORD [8+EDX],ECX
	PUSH	2
	PUSH	2
	PUSH	EAX
	CALL	_task_run
	ADD	ESP,20
	MOV	EAX,DWORD [-1044+EBP+EDI*1]
	MOV	EDX,DWORD [ESI+EDI*1]
	ADD	EDI,4
	OR	DWORD [28+EAX],32
	DEC	DWORD [-1076+EBP]
	MOV	DWORD [36+EAX],EDX
	JNS	L6
	PUSH	DWORD [-1064+EBP]
	MOV	DWORD [-1076+EBP],2
	CALL	_sheet_alloc
	PUSH	8320
	PUSH	3932160
	MOV	EDI,EAX
	CALL	_memman_alloc_4k
	PUSH	-1
	PUSH	52
	MOV	EBX,EAX
	PUSH	144
	PUSH	EAX
	PUSH	EDI
	CALL	_sheet_setbuf
	ADD	ESP,32
	PUSH	1
	PUSH	LC1
	PUSH	52
	PUSH	144
	PUSH	EBX
	LEA	EBX,DWORD [-1036+EBP]
	CALL	_make_window8
	PUSH	7
	PUSH	16
	PUSH	128
	PUSH	28
	PUSH	8
	PUSH	EDI
	CALL	_make_textbox8
	ADD	ESP,44
	MOV	DWORD [-1080+EBP],8
	MOV	DWORD [-1084+EBP],7
	CALL	_timer_alloc
	PUSH	1
	MOV	DWORD [-1104+EBP],EAX
	LEA	EAX,DWORD [-92+EBP]
	PUSH	EAX
	PUSH	DWORD [-1104+EBP]
	CALL	_timer_init
	PUSH	50
	PUSH	DWORD [-1104+EBP]
	CALL	_timer_settime
	PUSH	DWORD [-1064+EBP]
	CALL	_sheet_alloc
	PUSH	99
	PUSH	16
	PUSH	16
	MOV	DWORD [-1096+EBP],EAX
	PUSH	EBX
	PUSH	EAX
	CALL	_sheet_setbuf
	ADD	ESP,44
	PUSH	99
	PUSH	EBX
	LEA	EBX,DWORD [-124+EBP]
	CALL	_init_mouse_cursor8
	MOVSX	EAX,WORD [4084]
	LEA	EDX,DWORD [-16+EAX]
	MOV	EAX,EDX
	CDQ
	IDIV	DWORD [-1076+EBP]
	MOV	DWORD [-1068+EBP],EAX
	MOVSX	EAX,WORD [4086]
	PUSH	0
	LEA	EDX,DWORD [-44+EAX]
	PUSH	0
	MOV	EAX,EDX
	CDQ
	IDIV	DWORD [-1076+EBP]
	PUSH	DWORD [-1092+EBP]
	MOV	DWORD [-1072+EBP],EAX
	CALL	_sheet_slide
	PUSH	6
	PUSH	56
	PUSH	DWORD [-1040+EBP]
	CALL	_sheet_slide
	ADD	ESP,32
	PUSH	2
	PUSH	8
	PUSH	DWORD [-1044+EBP]
	CALL	_sheet_slide
	PUSH	56
	PUSH	64
	PUSH	EDI
	CALL	_sheet_slide
	PUSH	DWORD [-1072+EBP]
	PUSH	DWORD [-1068+EBP]
	PUSH	DWORD [-1096+EBP]
	CALL	_sheet_slide
	ADD	ESP,36
	PUSH	0
	PUSH	DWORD [-1092+EBP]
	CALL	_sheet_updown
	PUSH	1
	PUSH	DWORD [-1040+EBP]
	CALL	_sheet_updown
	PUSH	2
	PUSH	DWORD [-1044+EBP]
	CALL	_sheet_updown
	PUSH	3
	PUSH	EDI
	CALL	_sheet_updown
	ADD	ESP,32
	PUSH	4
	PUSH	DWORD [-1096+EBP]
	CALL	_sheet_updown
	PUSH	237
	PUSH	EBX
	MOV	DWORD [-1132+EBP],EDI
	CALL	_fifo32_put
	PUSH	DWORD [-1112+EBP]
	PUSH	EBX
	CALL	_fifo32_put
	ADD	ESP,24
L7:
	LEA	EBX,DWORD [-124+EBP]
	PUSH	EBX
	CALL	_fifo32_status
	POP	ECX
	TEST	EAX,EAX
	JLE	L10
	CMP	DWORD [-1116+EBP],0
	JS	L82
L10:
	LEA	EBX,DWORD [-92+EBP]
	CALL	_io_cli
	PUSH	EBX
	CALL	_fifo32_status
	POP	EDX
	TEST	EAX,EAX
	JE	L83
	PUSH	EBX
	CALL	_fifo32_get
	MOV	DWORD [-1076+EBP],EAX
	CALL	_io_sti
	MOV	EDX,DWORD [-1132+EBP]
	POP	ESI
	CMP	DWORD [28+EDX],0
	JNE	L13
	MOV	ECX,DWORD [-1064+EBP]
	MOV	EAX,DWORD [16+ECX]
	MOV	EAX,DWORD [16+ECX+EAX*4]
	PUSH	DWORD [-1084+EBP]
	PUSH	EDI
	MOV	DWORD [-1132+EBP],EAX
	PUSH	EAX
	CALL	_keywin_on
	ADD	ESP,12
	MOV	DWORD [-1084+EBP],EAX
L13:
	MOV	EAX,DWORD [-1076+EBP]
	SUB	EAX,256
	CMP	EAX,255
	JBE	L84
	MOV	EAX,DWORD [-1076+EBP]
	SUB	EAX,512
	CMP	EAX,255
	JBE	L85
	CMP	DWORD [-1076+EBP],1
	JG	L7
	CMP	DWORD [-1076+EBP],0
	JE	L71
	PUSH	0
	PUSH	EBX
	PUSH	DWORD [-1104+EBP]
	CALL	_timer_init
	ADD	ESP,12
	CMP	DWORD [-1084+EBP],0
	JS	L73
	MOV	DWORD [-1084+EBP],0
L73:
	PUSH	50
	PUSH	DWORD [-1104+EBP]
	CALL	_timer_settime
	POP	EAX
	POP	EDX
	CMP	DWORD [-1084+EBP],0
	JS	L7
	MOV	EAX,DWORD [-1080+EBP]
	PUSH	43
	ADD	EAX,7
	PUSH	EAX
	PUSH	28
	PUSH	DWORD [-1080+EBP]
	MOVZX	EAX,BYTE [-1084+EBP]
	PUSH	EAX
	PUSH	DWORD [4+EDI]
	PUSH	DWORD [EDI]
	CALL	_boxfill8
	MOV	EAX,DWORD [-1080+EBP]
	PUSH	44
	ADD	EAX,8
	PUSH	EAX
	PUSH	28
	PUSH	DWORD [-1080+EBP]
	PUSH	EDI
	CALL	_sheet_refresh
	ADD	ESP,48
	JMP	L7
L71:
	PUSH	1
	PUSH	EBX
	PUSH	DWORD [-1104+EBP]
	CALL	_timer_init
	ADD	ESP,12
	CMP	DWORD [-1084+EBP],0
	JS	L73
	MOV	DWORD [-1084+EBP],7
	JMP	L73
L85:
	MOVZX	EAX,BYTE [-1076+EBP]
	PUSH	EAX
	LEA	EAX,DWORD [-780+EBP]
	PUSH	EAX
	CALL	_mouse_decode
	POP	ECX
	POP	EBX
	TEST	EAX,EAX
	JE	L7
	MOV	ECX,DWORD [-772+EBP]
	MOV	EAX,DWORD [-776+EBP]
	ADD	DWORD [-1072+EBP],ECX
	ADD	DWORD [-1068+EBP],EAX
	JS	L86
L50:
	CMP	DWORD [-1072+EBP],0
	JS	L87
L51:
	MOVSX	EAX,WORD [4084]
	DEC	EAX
	CMP	DWORD [-1068+EBP],EAX
	JLE	L52
	MOV	DWORD [-1068+EBP],EAX
L52:
	MOVSX	EAX,WORD [4086]
	DEC	EAX
	CMP	DWORD [-1072+EBP],EAX
	JLE	L53
	MOV	DWORD [-1072+EBP],EAX
L53:
	PUSH	DWORD [-1072+EBP]
	PUSH	DWORD [-1068+EBP]
	PUSH	DWORD [-1096+EBP]
	CALL	_sheet_slide
	ADD	ESP,12
	TEST	DWORD [-768+EBP],1
	JNE	L88
	MOV	DWORD [-1120+EBP],-1
	JMP	L7
L88:
	CMP	DWORD [-1120+EBP],0
	JS	L89
	MOV	EBX,DWORD [-1072+EBP]
	MOV	EAX,DWORD [-1128+EBP]
	SUB	EBX,DWORD [-1124+EBP]
	MOV	ESI,DWORD [-1068+EBP]
	SUB	ESI,DWORD [-1120+EBP]
	ADD	EBX,DWORD [16+EAX]
	PUSH	EBX
	ADD	ESI,DWORD [12+EAX]
	PUSH	ESI
	PUSH	EAX
	CALL	_sheet_slide
	ADD	ESP,12
	MOV	EDX,DWORD [-1068+EBP]
	MOV	ECX,DWORD [-1072+EBP]
	MOV	DWORD [-1120+EBP],EDX
	MOV	DWORD [-1124+EBP],ECX
	JMP	L7
L89:
	MOV	EDX,DWORD [-1064+EBP]
	MOV	EDX,DWORD [16+EDX]
	MOV	DWORD [-1136+EBP],EDX
	MOV	ECX,EDX
L81:
	DEC	ECX
	TEST	ECX,ECX
	JLE	L7
	MOV	EAX,DWORD [-1064+EBP]
	MOV	EBX,DWORD [-1072+EBP]
	MOV	ESI,DWORD [-1068+EBP]
	MOV	EAX,DWORD [20+EAX+ECX*4]
	MOV	DWORD [-1128+EBP],EAX
	SUB	EBX,DWORD [16+EAX]
	SUB	ESI,DWORD [12+EAX]
	JS	L81
	MOV	EAX,DWORD [4+EAX]
	CMP	ESI,EAX
	JGE	L81
	TEST	EBX,EBX
	JS	L81
	MOV	EDX,DWORD [-1128+EBP]
	CMP	EBX,DWORD [8+EDX]
	JGE	L81
	IMUL	EAX,EBX
	MOV	DWORD [-1140+EBP],EAX
	MOV	EDX,DWORD [EDX]
	MOV	EAX,DWORD [-1140+EBP]
	ADD	EAX,ESI
	MOVZX	EAX,BYTE [EAX+EDX*1]
	MOV	EDX,DWORD [-1128+EBP]
	CMP	EAX,DWORD [20+EDX]
	JE	L81
	MOV	EAX,DWORD [-1136+EBP]
	DEC	EAX
	PUSH	EAX
	PUSH	EDX
	CALL	_sheet_updown
	MOV	ECX,DWORD [-1132+EBP]
	POP	EAX
	CMP	DWORD [-1128+EBP],ECX
	POP	EDX
	JE	L62
	PUSH	DWORD [-1080+EBP]
	PUSH	DWORD [-1084+EBP]
	PUSH	EDI
	PUSH	ECX
	CALL	_keywin_off
	MOV	DWORD [-1084+EBP],EAX
	MOV	EAX,DWORD [-1128+EBP]
	PUSH	DWORD [-1084+EBP]
	PUSH	EDI
	MOV	DWORD [-1132+EBP],EAX
	PUSH	EAX
	CALL	_keywin_on
	ADD	ESP,28
	MOV	DWORD [-1084+EBP],EAX
L62:
	CMP	ESI,2
	JLE	L63
	MOV	EDX,DWORD [-1128+EBP]
	MOV	EAX,DWORD [4+EDX]
	SUB	EAX,3
	CMP	ESI,EAX
	JGE	L63
	CMP	EBX,2
	JLE	L63
	CMP	EBX,20
	JG	L63
	MOV	ECX,DWORD [-1068+EBP]
	MOV	EAX,DWORD [-1072+EBP]
	MOV	DWORD [-1120+EBP],ECX
	MOV	DWORD [-1124+EBP],EAX
L63:
	MOV	ECX,DWORD [-1128+EBP]
	MOV	EDX,DWORD [4+ECX]
	LEA	EAX,DWORD [-21+EDX]
	CMP	EAX,ESI
	JG	L7
	LEA	EAX,DWORD [-5+EDX]
	CMP	ESI,EAX
	JGE	L7
	CMP	EBX,4
	JLE	L7
	CMP	EBX,18
	JG	L7
	TEST	BYTE [28+ECX],16
	JE	L7
	PUSH	LC4
	PUSH	DWORD [4076]
	CALL	_cons_putstr0
	CALL	_io_cli
	MOV	EAX,DWORD [-1060+EBP]
	LEA	EDX,DWORD [48+EAX]
	MOV	DWORD [84+EAX],EDX
	MOV	DWORD [76+EAX],_asm_end_app
	CALL	_io_sti
	POP	ECX
	POP	EBX
	JMP	L7
L87:
	MOV	DWORD [-1072+EBP],0
	JMP	L51
L86:
	MOV	DWORD [-1068+EBP],0
	JMP	L50
L84:
	CMP	DWORD [-1076+EBP],383
	JG	L15
	CMP	DWORD [-1108+EBP],0
	JNE	L16
	MOV	EDX,DWORD [-1076+EBP]
	MOV	AL,BYTE [_keytable0.0-256+EDX]
L80:
	MOV	BYTE [-60+EBP],AL
L18:
	MOV	DL,BYTE [-60+EBP]
	LEA	EAX,DWORD [-65+EDX]
	CMP	AL,25
	JA	L19
	TEST	DWORD [-1112+EBP],4
	JNE	L79
	CMP	DWORD [-1108+EBP],0
	JE	L21
L19:
	MOV	AL,BYTE [-60+EBP]
	TEST	AL,AL
	JE	L23
	CMP	DWORD [-1132+EBP],EDI
	JE	L90
	MOVSX	EAX,AL
	ADD	EAX,256
	MOV	EDX,DWORD [-1132+EBP]
	PUSH	EAX
	MOV	EAX,DWORD [36+EDX]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	POP	ECX
	POP	EBX
L23:
	CMP	DWORD [-1076+EBP],270
	JE	L91
L27:
	CMP	DWORD [-1076+EBP],284
	JE	L92
L31:
	CMP	DWORD [-1076+EBP],271
	JE	L93
L33:
	CMP	DWORD [-1076+EBP],298
	JE	L94
L35:
	CMP	DWORD [-1076+EBP],310
	JE	L95
L36:
	CMP	DWORD [-1076+EBP],426
	JE	L96
L37:
	CMP	DWORD [-1076+EBP],438
	JE	L97
L38:
	CMP	DWORD [-1076+EBP],314
	JE	L98
L39:
	CMP	DWORD [-1076+EBP],325
	JE	L99
L40:
	CMP	DWORD [-1076+EBP],326
	JE	L100
L41:
	CMP	DWORD [-1076+EBP],315
	JE	L101
L42:
	CMP	DWORD [-1076+EBP],343
	JE	L102
L43:
	CMP	DWORD [-1076+EBP],506
	JE	L103
L44:
	CMP	DWORD [-1076+EBP],510
	JE	L104
L45:
	CMP	DWORD [-1084+EBP],0
	JS	L46
	MOV	EAX,DWORD [-1080+EBP]
	PUSH	43
	ADD	EAX,7
	PUSH	EAX
	PUSH	28
	PUSH	DWORD [-1080+EBP]
	MOVZX	EAX,BYTE [-1084+EBP]
	PUSH	EAX
	PUSH	DWORD [4+EDI]
	PUSH	DWORD [EDI]
	CALL	_boxfill8
	ADD	ESP,28
L46:
	MOV	EAX,DWORD [-1080+EBP]
	PUSH	44
	ADD	EAX,8
	PUSH	EAX
	PUSH	28
	PUSH	DWORD [-1080+EBP]
	PUSH	EDI
	CALL	_sheet_refresh
	ADD	ESP,20
	JMP	L7
L104:
	CALL	_wait_KBC_sendready
	PUSH	DWORD [-1116+EBP]
	PUSH	96
	CALL	_io_out8
	POP	ESI
	POP	EAX
	JMP	L45
L103:
	MOV	DWORD [-1116+EBP],-1
	JMP	L44
L102:
	MOV	EDX,DWORD [-1064+EBP]
	MOV	EAX,DWORD [16+EDX]
	DEC	EAX
	PUSH	EAX
	PUSH	DWORD [24+EDX]
	CALL	_sheet_updown
	POP	EAX
	POP	EDX
	JMP	L43
L101:
	CMP	DWORD [-1108+EBP],0
	JE	L42
	MOV	EAX,DWORD [-1060+EBP]
	CMP	DWORD [52+EAX],0
	JE	L42
	PUSH	LC3
	PUSH	DWORD [4076]
	CALL	_cons_putstr0
	CALL	_io_cli
	MOV	EAX,DWORD [-1060+EBP]
	LEA	EDX,DWORD [48+EAX]
	MOV	DWORD [84+EAX],EDX
	MOV	DWORD [76+EAX],_asm_end_app
	CALL	_io_sti
	POP	ECX
	POP	EBX
	JMP	L42
L100:
	PUSH	237
	LEA	EBX,DWORD [-124+EBP]
	PUSH	EBX
	XOR	DWORD [-1112+EBP],1
	CALL	_fifo32_put
	PUSH	DWORD [-1112+EBP]
	PUSH	EBX
	CALL	_fifo32_put
	ADD	ESP,16
	JMP	L41
L99:
	PUSH	237
	LEA	EBX,DWORD [-124+EBP]
	PUSH	EBX
	XOR	DWORD [-1112+EBP],2
	CALL	_fifo32_put
	PUSH	DWORD [-1112+EBP]
	PUSH	EBX
	CALL	_fifo32_put
	ADD	ESP,16
	JMP	L40
L98:
	PUSH	237
	LEA	EBX,DWORD [-124+EBP]
	PUSH	EBX
	XOR	DWORD [-1112+EBP],4
	CALL	_fifo32_put
	PUSH	DWORD [-1112+EBP]
	PUSH	EBX
	CALL	_fifo32_put
	ADD	ESP,16
	JMP	L39
L97:
	AND	DWORD [-1108+EBP],-3
	JMP	L38
L96:
	AND	DWORD [-1108+EBP],-2
	JMP	L37
L95:
	OR	DWORD [-1108+EBP],2
	JMP	L36
L94:
	OR	DWORD [-1108+EBP],1
	JMP	L35
L93:
	PUSH	DWORD [-1080+EBP]
	PUSH	DWORD [-1084+EBP]
	PUSH	EDI
	PUSH	DWORD [-1132+EBP]
	CALL	_keywin_off
	ADD	ESP,16
	MOV	DWORD [-1084+EBP],EAX
	MOV	EAX,DWORD [-1132+EBP]
	MOV	ECX,DWORD [24+EAX]
	DEC	ECX
	JNE	L34
	MOV	EDX,DWORD [-1064+EBP]
	MOV	ECX,DWORD [16+EDX]
	DEC	ECX
L34:
	MOV	EAX,DWORD [-1064+EBP]
	MOV	ECX,DWORD [20+EAX+ECX*4]
	PUSH	DWORD [-1084+EBP]
	PUSH	EDI
	MOV	DWORD [-1132+EBP],ECX
	PUSH	ECX
	CALL	_keywin_on
	ADD	ESP,12
	MOV	DWORD [-1084+EBP],EAX
	JMP	L33
L92:
	CMP	DWORD [-1132+EBP],EDI
	JE	L31
	MOV	EDX,DWORD [-1132+EBP]
	PUSH	266
	MOV	EAX,DWORD [36+EDX]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	POP	ESI
	POP	EAX
	JMP	L31
L91:
	CMP	DWORD [-1132+EBP],EDI
	JE	L105
	MOV	ECX,DWORD [-1132+EBP]
	PUSH	264
	MOV	EAX,DWORD [36+ECX]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	POP	EAX
	POP	EDX
	JMP	L27
L105:
	CMP	DWORD [-1080+EBP],8
	JLE	L27
	PUSH	1
	PUSH	LC2
	PUSH	7
	PUSH	0
	PUSH	28
	PUSH	DWORD [-1080+EBP]
	PUSH	EDI
	CALL	_putfonts8_asc_sht
	ADD	ESP,28
	SUB	DWORD [-1080+EBP],8
	JMP	L27
L90:
	CMP	DWORD [-1080+EBP],127
	JG	L23
	PUSH	1
	LEA	EAX,DWORD [-60+EBP]
	PUSH	EAX
	PUSH	7
	PUSH	0
	PUSH	28
	PUSH	DWORD [-1080+EBP]
	PUSH	EDI
	MOV	BYTE [-59+EBP],0
	CALL	_putfonts8_asc_sht
	ADD	ESP,28
	ADD	DWORD [-1080+EBP],8
	JMP	L23
L21:
	LEA	EAX,DWORD [32+EDX]
	MOV	BYTE [-60+EBP],AL
	JMP	L19
L79:
	CMP	DWORD [-1108+EBP],0
	JE	L19
	JMP	L21
L16:
	MOV	ECX,DWORD [-1076+EBP]
	MOV	AL,BYTE [_keytable1.1-256+ECX]
	JMP	L80
L15:
	MOV	BYTE [-60+EBP],0
	JMP	L18
L83:
	PUSH	DWORD [-1100+EBP]
	CALL	_task_sleep
	CALL	_io_sti
	POP	EAX
	JMP	L7
L82:
	PUSH	EBX
	CALL	_fifo32_get
	MOV	DWORD [-1116+EBP],EAX
	CALL	_wait_KBC_sendready
	PUSH	DWORD [-1116+EBP]
	PUSH	96
	CALL	_io_out8
	ADD	ESP,12
	JMP	L10
	GLOBAL	_keywin_off
_keywin_off:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	MOV	EDI,DWORD [16+EBP]
	MOV	EBX,DWORD [8+EBP]
	PUSH	0
	PUSH	EBX
	MOV	ESI,DWORD [20+EBP]
	CALL	_change_wtitle8
	CMP	EBX,DWORD [12+EBP]
	POP	EAX
	POP	EDX
	JE	L110
	TEST	BYTE [28+EBX],32
	JNE	L111
L108:
	LEA	ESP,DWORD [-12+EBP]
	MOV	EAX,EDI
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L111:
	PUSH	3
	MOV	EAX,DWORD [36+EBX]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	POP	EBX
	POP	ESI
	JMP	L108
L110:
	PUSH	43
	LEA	EAX,DWORD [7+ESI]
	PUSH	EAX
	OR	EDI,-1
	PUSH	28
	PUSH	ESI
	PUSH	7
	PUSH	DWORD [4+EBX]
	PUSH	DWORD [EBX]
	CALL	_boxfill8
	ADD	ESP,28
	JMP	L108
	GLOBAL	_keywin_on
_keywin_on:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	PUSH	1
	MOV	EBX,DWORD [8+EBP]
	PUSH	EBX
	MOV	ESI,DWORD [16+EBP]
	CALL	_change_wtitle8
	CMP	EBX,DWORD [12+EBP]
	POP	EAX
	POP	EDX
	JE	L116
	TEST	BYTE [28+EBX],32
	JNE	L117
L114:
	LEA	ESP,DWORD [-8+EBP]
	MOV	EAX,ESI
	POP	EBX
	POP	ESI
	POP	EBP
	RET
L117:
	PUSH	2
	MOV	EAX,DWORD [36+EBX]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	POP	ECX
	POP	EBX
	JMP	L114
L116:
	XOR	ESI,ESI
	JMP	L114
