	.file	"bootpack.c"
	.data
_keytable0.0:
	.byte	0
	.byte	0
	.byte	49
	.byte	50
	.byte	51
	.byte	52
	.byte	53
	.byte	54
	.byte	55
	.byte	56
	.byte	57
	.byte	48
	.byte	45
	.byte	94
	.byte	0
	.byte	0
	.byte	81
	.byte	87
	.byte	69
	.byte	82
	.byte	84
	.byte	89
	.byte	85
	.byte	73
	.byte	79
	.byte	80
	.byte	64
	.byte	91
	.byte	0
	.byte	0
	.byte	65
	.byte	83
	.byte	68
	.byte	70
	.byte	71
	.byte	72
	.byte	74
	.byte	75
	.byte	76
	.byte	59
	.byte	58
	.byte	0
	.byte	0
	.byte	93
	.byte	90
	.byte	88
	.byte	67
	.byte	86
	.byte	66
	.byte	78
	.byte	77
	.byte	44
	.byte	46
	.byte	47
	.byte	0
	.byte	42
	.byte	0
	.byte	32
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	55
	.byte	56
	.byte	57
	.byte	45
	.byte	52
	.byte	53
	.byte	54
	.byte	43
	.byte	49
	.byte	50
	.byte	51
	.byte	48
	.byte	46
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	92
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	92
	.byte	0
	.byte	0
_keytable1.1:
	.byte	0
	.byte	0
	.byte	33
	.byte	34
	.byte	35
	.byte	36
	.byte	37
	.byte	38
	.byte	39
	.byte	40
	.byte	41
	.byte	126
	.byte	61
	.byte	126
	.byte	0
	.byte	0
	.byte	81
	.byte	87
	.byte	69
	.byte	82
	.byte	84
	.byte	89
	.byte	85
	.byte	73
	.byte	79
	.byte	80
	.byte	96
	.byte	123
	.byte	0
	.byte	0
	.byte	65
	.byte	83
	.byte	68
	.byte	70
	.byte	71
	.byte	72
	.byte	74
	.byte	75
	.byte	76
	.byte	43
	.byte	42
	.byte	0
	.byte	0
	.byte	125
	.byte	90
	.byte	88
	.byte	67
	.byte	86
	.byte	66
	.byte	78
	.byte	77
	.byte	60
	.byte	62
	.byte	63
	.byte	0
	.byte	42
	.byte	0
	.byte	32
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	55
	.byte	56
	.byte	57
	.byte	45
	.byte	52
	.byte	53
	.byte	54
	.byte	43
	.byte	49
	.byte	50
	.byte	51
	.byte	48
	.byte	46
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	95
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	124
	.byte	0
	.byte	0
LC0:
	.ascii "console\0"
LC1:
	.ascii "task_a\0"
LC4:
	.ascii "\12Break(mouse) :\12\0"
LC3:
	.ascii "\12Break(key) :\12\0"
LC2:
	.ascii " \0"
	.text
	.balign 2
.globl _HariMain
	.def	_HariMain;	.scl	2;	.type	32;	.endef
_HariMain:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	leal	-92(%ebp), %ebx
	subl	$1128, %esp
	movl	$0, -1108(%ebp)
	movb	4081, %al
	sarb	$4, %al
	movl	%eax, %edx
	andl	$7, %edx
	movl	%edx, -1112(%ebp)
	movl	$-1, -1116(%ebp)
	movl	$-1, -1120(%ebp)
	movl	$-1, -1124(%ebp)
	movl	$0, -1128(%ebp)
	call	_init_gdtidt
	call	_init_pic
	call	_io_sti
	leal	-636(%ebp), %eax
	pushl	$0
	pushl	%eax
	pushl	$128
	pushl	%ebx
	call	_fifo32_init
	call	_init_pit
	pushl	$256
	pushl	%ebx
	call	_init_keyboard
	leal	-780(%ebp), %eax
	pushl	%eax
	pushl	$512
	pushl	%ebx
	call	_enable_mouse
	addl	$36, %esp
	pushl	$248
	pushl	$33
	call	_io_out8
	pushl	$239
	pushl	$161
	call	_io_out8
	leal	-764(%ebp), %eax
	pushl	$0
	pushl	%eax
	leal	-124(%ebp), %eax
	pushl	$32
	pushl	%eax
	call	_fifo32_init
	addl	$32, %esp
	pushl	$-1073741825
	pushl	$4194304
	call	_memtest
	pushl	$3932160
	movl	%eax, -1088(%ebp)
	call	_memman_init
	pushl	$647168
	pushl	$4096
	pushl	$3932160
	call	_memman_free
	movl	-1088(%ebp), %eax
	subl	$4194304, %eax
	pushl	%eax
	pushl	$4194304
	pushl	$3932160
	call	_memman_free
	addl	$36, %esp
	call	_init_palette
	movswl	4086,%eax
	pushl	%eax
	movswl	4084,%eax
	pushl	%eax
	pushl	4088
	pushl	$3932160
	call	_shtctl_init
	pushl	$3932160
	movl	%eax, -1064(%ebp)
	call	_task_init
	pushl	$2
	pushl	$1
	movl	%eax, -1100(%ebp)
	pushl	%eax
	movl	%eax, -68(%ebp)
	call	_task_run
	addl	$32, %esp
	movl	-1064(%ebp), %ecx
	movl	%ecx, 4068
	pushl	%ecx
	call	_sheet_alloc
	movswl	4086,%edx
	movl	%eax, -1092(%ebp)
	movswl	4084,%eax
	imull	%edx, %eax
	pushl	%eax
	pushl	$3932160
	call	_memman_alloc_4k
	pushl	$-1
	movl	%eax, %ebx
	movswl	4086,%eax
	pushl	%eax
	movswl	4084,%eax
	pushl	%eax
	pushl	%ebx
	pushl	-1092(%ebp)
	call	_sheet_setbuf
	addl	$32, %esp
	movswl	4086,%eax
	pushl	%eax
	movswl	4084,%eax
	pushl	%eax
	pushl	%ebx
	call	_init_screen8
	addl	$12, %esp
	movl	$1, -1076(%ebp)
	xorl	%edi, %edi
L6:
	pushl	-1064(%ebp)
	leal	-1052(%ebp), %ebx
	call	_sheet_alloc
	pushl	$42240
	leal	-1060(%ebp), %esi
	pushl	$3932160
	movl	%eax, -1044(%ebp,%edi)
	call	_memman_alloc_4k
	movl	%eax, (%ebx,%edi)
	pushl	$-1
	pushl	$165
	pushl	$256
	pushl	%eax
	pushl	-1044(%ebp,%edi)
	call	_sheet_setbuf
	addl	$32, %esp
	pushl	$0
	pushl	$LC0
	pushl	$165
	pushl	$256
	pushl	(%ebx,%edi)
	call	_make_window8
	pushl	$0
	pushl	$128
	pushl	$240
	pushl	$28
	pushl	$8
	pushl	-1044(%ebp,%edi)
	call	_make_textbox8
	addl	$44, %esp
	call	_task_alloc
	movl	%eax, %ebx
	movl	%eax, (%esi,%edi)
	pushl	$65536
	pushl	$3932160
	call	_memman_alloc_4k
	movl	-1044(%ebp,%edi), %edx
	addl	$65524, %eax
	movl	%eax, 100(%ebx)
	movl	(%esi,%edi), %eax
	movl	100(%eax), %ecx
	movl	$_console_task, 76(%eax)
	movl	$8, 116(%eax)
	movl	$16, 120(%eax)
	movl	$8, 124(%eax)
	movl	$8, 128(%eax)
	movl	$8, 132(%eax)
	movl	$8, 136(%eax)
	movl	%edx, 4(%ecx)
	movl	-1088(%ebp), %ecx
	movl	100(%eax), %edx
	movl	%ecx, 8(%edx)
	pushl	$2
	pushl	$2
	pushl	%eax
	call	_task_run
	addl	$20, %esp
	movl	-1044(%ebp,%edi), %eax
	movl	(%esi,%edi), %edx
	addl	$4, %edi
	orl	$32, 28(%eax)
	decl	-1076(%ebp)
	movl	%edx, 36(%eax)
	jns	L6
	pushl	-1064(%ebp)
	movl	$2, -1076(%ebp)
	call	_sheet_alloc
	pushl	$8320
	pushl	$3932160
	movl	%eax, %edi
	call	_memman_alloc_4k
	pushl	$-1
	pushl	$52
	movl	%eax, %ebx
	pushl	$144
	pushl	%eax
	pushl	%edi
	call	_sheet_setbuf
	addl	$32, %esp
	pushl	$1
	pushl	$LC1
	pushl	$52
	pushl	$144
	pushl	%ebx
	leal	-1036(%ebp), %ebx
	call	_make_window8
	pushl	$7
	pushl	$16
	pushl	$128
	pushl	$28
	pushl	$8
	pushl	%edi
	call	_make_textbox8
	addl	$44, %esp
	movl	$8, -1080(%ebp)
	movl	$7, -1084(%ebp)
	call	_timer_alloc
	pushl	$1
	movl	%eax, -1104(%ebp)
	leal	-92(%ebp), %eax
	pushl	%eax
	pushl	-1104(%ebp)
	call	_timer_init
	pushl	$50
	pushl	-1104(%ebp)
	call	_timer_settime
	pushl	-1064(%ebp)
	call	_sheet_alloc
	pushl	$99
	pushl	$16
	pushl	$16
	movl	%eax, -1096(%ebp)
	pushl	%ebx
	pushl	%eax
	call	_sheet_setbuf
	addl	$44, %esp
	pushl	$99
	pushl	%ebx
	leal	-124(%ebp), %ebx
	call	_init_mouse_cursor8
	movswl	4084,%eax
	leal	-16(%eax), %edx
	movl	%edx, %eax
	cltd
	idivl	-1076(%ebp)
	movl	%eax, -1068(%ebp)
	movswl	4086,%eax
	pushl	$0
	leal	-44(%eax), %edx
	pushl	$0
	movl	%edx, %eax
	cltd
	idivl	-1076(%ebp)
	pushl	-1092(%ebp)
	movl	%eax, -1072(%ebp)
	call	_sheet_slide
	pushl	$6
	pushl	$56
	pushl	-1040(%ebp)
	call	_sheet_slide
	addl	$32, %esp
	pushl	$2
	pushl	$8
	pushl	-1044(%ebp)
	call	_sheet_slide
	pushl	$56
	pushl	$64
	pushl	%edi
	call	_sheet_slide
	pushl	-1072(%ebp)
	pushl	-1068(%ebp)
	pushl	-1096(%ebp)
	call	_sheet_slide
	addl	$36, %esp
	pushl	$0
	pushl	-1092(%ebp)
	call	_sheet_updown
	pushl	$1
	pushl	-1040(%ebp)
	call	_sheet_updown
	pushl	$2
	pushl	-1044(%ebp)
	call	_sheet_updown
	pushl	$3
	pushl	%edi
	call	_sheet_updown
	addl	$32, %esp
	pushl	$4
	pushl	-1096(%ebp)
	call	_sheet_updown
	pushl	$237
	pushl	%ebx
	movl	%edi, -1132(%ebp)
	call	_fifo32_put
	pushl	-1112(%ebp)
	pushl	%ebx
	call	_fifo32_put
	addl	$24, %esp
L7:
	leal	-124(%ebp), %ebx
	pushl	%ebx
	call	_fifo32_status
	popl	%ecx
	testl	%eax, %eax
	jle	L10
	cmpl	$0, -1116(%ebp)
	js	L82
L10:
	leal	-92(%ebp), %ebx
	call	_io_cli
	pushl	%ebx
	call	_fifo32_status
	popl	%edx
	testl	%eax, %eax
	je	L83
	pushl	%ebx
	call	_fifo32_get
	movl	%eax, -1076(%ebp)
	call	_io_sti
	movl	-1132(%ebp), %edx
	popl	%esi
	cmpl	$0, 28(%edx)
	jne	L13
	movl	-1064(%ebp), %ecx
	movl	16(%ecx), %eax
	movl	16(%ecx,%eax,4), %eax
	pushl	-1084(%ebp)
	pushl	%edi
	movl	%eax, -1132(%ebp)
	pushl	%eax
	call	_keywin_on
	addl	$12, %esp
	movl	%eax, -1084(%ebp)
L13:
	movl	-1076(%ebp), %eax
	subl	$256, %eax
	cmpl	$255, %eax
	jbe	L84
	movl	-1076(%ebp), %eax
	subl	$512, %eax
	cmpl	$255, %eax
	jbe	L85
	cmpl	$1, -1076(%ebp)
	jg	L7
	cmpl	$0, -1076(%ebp)
	je	L71
	pushl	$0
	pushl	%ebx
	pushl	-1104(%ebp)
	call	_timer_init
	addl	$12, %esp
	cmpl	$0, -1084(%ebp)
	js	L73
	movl	$0, -1084(%ebp)
L73:
	pushl	$50
	pushl	-1104(%ebp)
	call	_timer_settime
	popl	%eax
	popl	%edx
	cmpl	$0, -1084(%ebp)
	js	L7
	movl	-1080(%ebp), %eax
	pushl	$43
	addl	$7, %eax
	pushl	%eax
	pushl	$28
	pushl	-1080(%ebp)
	movzbl	-1084(%ebp), %eax
	pushl	%eax
	pushl	4(%edi)
	pushl	(%edi)
	call	_boxfill8
	movl	-1080(%ebp), %eax
	pushl	$44
	addl	$8, %eax
	pushl	%eax
	pushl	$28
	pushl	-1080(%ebp)
	pushl	%edi
	call	_sheet_refresh
	addl	$48, %esp
	jmp	L7
L71:
	pushl	$1
	pushl	%ebx
	pushl	-1104(%ebp)
	call	_timer_init
	addl	$12, %esp
	cmpl	$0, -1084(%ebp)
	js	L73
	movl	$7, -1084(%ebp)
	jmp	L73
L85:
	movzbl	-1076(%ebp), %eax
	pushl	%eax
	leal	-780(%ebp), %eax
	pushl	%eax
	call	_mouse_decode
	popl	%ecx
	popl	%ebx
	testl	%eax, %eax
	je	L7
	movl	-772(%ebp), %ecx
	movl	-776(%ebp), %eax
	addl	%ecx, -1072(%ebp)
	addl	%eax, -1068(%ebp)
	js	L86
L50:
	cmpl	$0, -1072(%ebp)
	js	L87
L51:
	movswl	4084,%eax
	decl	%eax
	cmpl	%eax, -1068(%ebp)
	jle	L52
	movl	%eax, -1068(%ebp)
L52:
	movswl	4086,%eax
	decl	%eax
	cmpl	%eax, -1072(%ebp)
	jle	L53
	movl	%eax, -1072(%ebp)
L53:
	pushl	-1072(%ebp)
	pushl	-1068(%ebp)
	pushl	-1096(%ebp)
	call	_sheet_slide
	addl	$12, %esp
	testl	$1, -768(%ebp)
	jne	L88
	movl	$-1, -1120(%ebp)
	jmp	L7
L88:
	cmpl	$0, -1120(%ebp)
	js	L89
	movl	-1072(%ebp), %ebx
	movl	-1128(%ebp), %eax
	subl	-1124(%ebp), %ebx
	movl	-1068(%ebp), %esi
	subl	-1120(%ebp), %esi
	addl	16(%eax), %ebx
	pushl	%ebx
	addl	12(%eax), %esi
	pushl	%esi
	pushl	%eax
	call	_sheet_slide
	addl	$12, %esp
	movl	-1068(%ebp), %edx
	movl	-1072(%ebp), %ecx
	movl	%edx, -1120(%ebp)
	movl	%ecx, -1124(%ebp)
	jmp	L7
L89:
	movl	-1064(%ebp), %edx
	movl	16(%edx), %edx
	movl	%edx, -1136(%ebp)
	movl	%edx, %ecx
L81:
	decl	%ecx
	testl	%ecx, %ecx
	jle	L7
	movl	-1064(%ebp), %eax
	movl	-1072(%ebp), %ebx
	movl	-1068(%ebp), %esi
	movl	20(%eax,%ecx,4), %eax
	movl	%eax, -1128(%ebp)
	subl	16(%eax), %ebx
	subl	12(%eax), %esi
	js	L81
	movl	4(%eax), %eax
	cmpl	%eax, %esi
	jge	L81
	testl	%ebx, %ebx
	js	L81
	movl	-1128(%ebp), %edx
	cmpl	8(%edx), %ebx
	jge	L81
	imull	%ebx, %eax
	movl	%eax, -1140(%ebp)
	movl	(%edx), %edx
	movl	-1140(%ebp), %eax
	addl	%esi, %eax
	movzbl	(%eax,%edx), %eax
	movl	-1128(%ebp), %edx
	cmpl	20(%edx), %eax
	je	L81
	movl	-1136(%ebp), %eax
	decl	%eax
	pushl	%eax
	pushl	%edx
	call	_sheet_updown
	movl	-1132(%ebp), %ecx
	popl	%eax
	cmpl	%ecx, -1128(%ebp)
	popl	%edx
	je	L62
	pushl	-1080(%ebp)
	pushl	-1084(%ebp)
	pushl	%edi
	pushl	%ecx
	call	_keywin_off
	movl	%eax, -1084(%ebp)
	movl	-1128(%ebp), %eax
	pushl	-1084(%ebp)
	pushl	%edi
	movl	%eax, -1132(%ebp)
	pushl	%eax
	call	_keywin_on
	addl	$28, %esp
	movl	%eax, -1084(%ebp)
L62:
	cmpl	$2, %esi
	jle	L63
	movl	-1128(%ebp), %edx
	movl	4(%edx), %eax
	subl	$3, %eax
	cmpl	%eax, %esi
	jge	L63
	cmpl	$2, %ebx
	jle	L63
	cmpl	$20, %ebx
	jg	L63
	movl	-1068(%ebp), %ecx
	movl	-1072(%ebp), %eax
	movl	%ecx, -1120(%ebp)
	movl	%eax, -1124(%ebp)
L63:
	movl	-1128(%ebp), %ecx
	movl	4(%ecx), %edx
	leal	-21(%edx), %eax
	cmpl	%esi, %eax
	jg	L7
	leal	-5(%edx), %eax
	cmpl	%eax, %esi
	jge	L7
	cmpl	$4, %ebx
	jle	L7
	cmpl	$18, %ebx
	jg	L7
	testb	$16, 28(%ecx)
	je	L7
	pushl	$LC4
	pushl	4076
	call	_cons_putstr0
	call	_io_cli
	movl	-1060(%ebp), %eax
	leal	48(%eax), %edx
	movl	%edx, 84(%eax)
	movl	$_asm_end_app, 76(%eax)
	call	_io_sti
	popl	%ecx
	popl	%ebx
	jmp	L7
L87:
	movl	$0, -1072(%ebp)
	jmp	L51
L86:
	movl	$0, -1068(%ebp)
	jmp	L50
L84:
	cmpl	$383, -1076(%ebp)
	jg	L15
	cmpl	$0, -1108(%ebp)
	jne	L16
	movl	-1076(%ebp), %edx
	movb	_keytable0.0-256(%edx), %al
L80:
	movb	%al, -60(%ebp)
L18:
	movb	-60(%ebp), %dl
	leal	-65(%edx), %eax
	cmpb	$25, %al
	ja	L19
	testl	$4, -1112(%ebp)
	jne	L79
	cmpl	$0, -1108(%ebp)
	je	L21
L19:
	movb	-60(%ebp), %al
	testb	%al, %al
	je	L23
	cmpl	%edi, -1132(%ebp)
	je	L90
	movsbl	%al,%eax
	addl	$256, %eax
	movl	-1132(%ebp), %edx
	pushl	%eax
	movl	36(%edx), %eax
	addl	$16, %eax
	pushl	%eax
	call	_fifo32_put
	popl	%ecx
	popl	%ebx
L23:
	cmpl	$270, -1076(%ebp)
	je	L91
L27:
	cmpl	$284, -1076(%ebp)
	je	L92
L31:
	cmpl	$271, -1076(%ebp)
	je	L93
L33:
	cmpl	$298, -1076(%ebp)
	je	L94
L35:
	cmpl	$310, -1076(%ebp)
	je	L95
L36:
	cmpl	$426, -1076(%ebp)
	je	L96
L37:
	cmpl	$438, -1076(%ebp)
	je	L97
L38:
	cmpl	$314, -1076(%ebp)
	je	L98
L39:
	cmpl	$325, -1076(%ebp)
	je	L99
L40:
	cmpl	$326, -1076(%ebp)
	je	L100
L41:
	cmpl	$315, -1076(%ebp)
	je	L101
L42:
	cmpl	$343, -1076(%ebp)
	je	L102
L43:
	cmpl	$506, -1076(%ebp)
	je	L103
L44:
	cmpl	$510, -1076(%ebp)
	je	L104
L45:
	cmpl	$0, -1084(%ebp)
	js	L46
	movl	-1080(%ebp), %eax
	pushl	$43
	addl	$7, %eax
	pushl	%eax
	pushl	$28
	pushl	-1080(%ebp)
	movzbl	-1084(%ebp), %eax
	pushl	%eax
	pushl	4(%edi)
	pushl	(%edi)
	call	_boxfill8
	addl	$28, %esp
L46:
	movl	-1080(%ebp), %eax
	pushl	$44
	addl	$8, %eax
	pushl	%eax
	pushl	$28
	pushl	-1080(%ebp)
	pushl	%edi
	call	_sheet_refresh
	addl	$20, %esp
	jmp	L7
L104:
	call	_wait_KBC_sendready
	pushl	-1116(%ebp)
	pushl	$96
	call	_io_out8
	popl	%esi
	popl	%eax
	jmp	L45
L103:
	movl	$-1, -1116(%ebp)
	jmp	L44
L102:
	movl	-1064(%ebp), %edx
	movl	16(%edx), %eax
	cmpl	$2, %eax
	jle	L43
	decl	%eax
	pushl	%eax
	pushl	24(%edx)
	call	_sheet_updown
	popl	%eax
	popl	%edx
	jmp	L43
L101:
	cmpl	$0, -1108(%ebp)
	je	L42
	movl	-1060(%ebp), %eax
	cmpl	$0, 52(%eax)
	je	L42
	pushl	$LC3
	pushl	4076
	call	_cons_putstr0
	call	_io_cli
	movl	-1060(%ebp), %eax
	leal	48(%eax), %edx
	movl	%edx, 84(%eax)
	movl	$_asm_end_app, 76(%eax)
	call	_io_sti
	popl	%ecx
	popl	%ebx
	jmp	L42
L100:
	pushl	$237
	leal	-124(%ebp), %ebx
	pushl	%ebx
	xorl	$1, -1112(%ebp)
	call	_fifo32_put
	pushl	-1112(%ebp)
	pushl	%ebx
	call	_fifo32_put
	addl	$16, %esp
	jmp	L41
L99:
	pushl	$237
	leal	-124(%ebp), %ebx
	pushl	%ebx
	xorl	$2, -1112(%ebp)
	call	_fifo32_put
	pushl	-1112(%ebp)
	pushl	%ebx
	call	_fifo32_put
	addl	$16, %esp
	jmp	L40
L98:
	pushl	$237
	leal	-124(%ebp), %ebx
	pushl	%ebx
	xorl	$4, -1112(%ebp)
	call	_fifo32_put
	pushl	-1112(%ebp)
	pushl	%ebx
	call	_fifo32_put
	addl	$16, %esp
	jmp	L39
L97:
	andl	$-3, -1108(%ebp)
	jmp	L38
L96:
	andl	$-2, -1108(%ebp)
	jmp	L37
L95:
	orl	$2, -1108(%ebp)
	jmp	L36
L94:
	orl	$1, -1108(%ebp)
	jmp	L35
L93:
	pushl	-1080(%ebp)
	pushl	-1084(%ebp)
	pushl	%edi
	pushl	-1132(%ebp)
	call	_keywin_off
	addl	$16, %esp
	movl	%eax, -1084(%ebp)
	movl	-1132(%ebp), %eax
	movl	24(%eax), %ecx
	decl	%ecx
	jne	L34
	movl	-1064(%ebp), %edx
	movl	16(%edx), %ecx
	decl	%ecx
L34:
	movl	-1064(%ebp), %eax
	movl	20(%eax,%ecx,4), %ecx
	pushl	-1084(%ebp)
	pushl	%edi
	movl	%ecx, -1132(%ebp)
	pushl	%ecx
	call	_keywin_on
	addl	$12, %esp
	movl	%eax, -1084(%ebp)
	jmp	L33
L92:
	cmpl	%edi, -1132(%ebp)
	je	L31
	movl	-1132(%ebp), %edx
	pushl	$266
	movl	36(%edx), %eax
	addl	$16, %eax
	pushl	%eax
	call	_fifo32_put
	popl	%esi
	popl	%eax
	jmp	L31
L91:
	cmpl	%edi, -1132(%ebp)
	je	L105
	movl	-1132(%ebp), %ecx
	pushl	$264
	movl	36(%ecx), %eax
	addl	$16, %eax
	pushl	%eax
	call	_fifo32_put
	popl	%eax
	popl	%edx
	jmp	L27
L105:
	cmpl	$8, -1080(%ebp)
	jle	L27
	pushl	$1
	pushl	$LC2
	pushl	$7
	pushl	$0
	pushl	$28
	pushl	-1080(%ebp)
	pushl	%edi
	call	_putfonts8_asc_sht
	addl	$28, %esp
	subl	$8, -1080(%ebp)
	jmp	L27
L90:
	cmpl	$127, -1080(%ebp)
	jg	L23
	pushl	$1
	leal	-60(%ebp), %eax
	pushl	%eax
	pushl	$7
	pushl	$0
	pushl	$28
	pushl	-1080(%ebp)
	pushl	%edi
	movb	$0, -59(%ebp)
	call	_putfonts8_asc_sht
	addl	$28, %esp
	addl	$8, -1080(%ebp)
	jmp	L23
L21:
	leal	32(%edx), %eax
	movb	%al, -60(%ebp)
	jmp	L19
L79:
	cmpl	$0, -1108(%ebp)
	je	L19
	jmp	L21
L16:
	movl	-1076(%ebp), %ecx
	movb	_keytable1.1-256(%ecx), %al
	jmp	L80
L15:
	movb	$0, -60(%ebp)
	jmp	L18
L83:
	pushl	-1100(%ebp)
	call	_task_sleep
	call	_io_sti
	popl	%eax
	jmp	L7
L82:
	pushl	%ebx
	call	_fifo32_get
	movl	%eax, -1116(%ebp)
	call	_wait_KBC_sendready
	pushl	-1116(%ebp)
	pushl	$96
	call	_io_out8
	addl	$12, %esp
	jmp	L10
	.balign 2
.globl _keywin_off
	.def	_keywin_off;	.scl	2;	.type	32;	.endef
_keywin_off:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	movl	16(%ebp), %edi
	movl	8(%ebp), %ebx
	pushl	$0
	pushl	%ebx
	movl	20(%ebp), %esi
	call	_change_wtitle8
	cmpl	12(%ebp), %ebx
	popl	%eax
	popl	%edx
	je	L110
	testb	$32, 28(%ebx)
	jne	L111
L108:
	leal	-12(%ebp), %esp
	movl	%edi, %eax
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L111:
	pushl	$3
	movl	36(%ebx), %eax
	addl	$16, %eax
	pushl	%eax
	call	_fifo32_put
	popl	%ebx
	popl	%esi
	jmp	L108
L110:
	pushl	$43
	leal	7(%esi), %eax
	pushl	%eax
	orl	$-1, %edi
	pushl	$28
	pushl	%esi
	pushl	$7
	pushl	4(%ebx)
	pushl	(%ebx)
	call	_boxfill8
	addl	$28, %esp
	jmp	L108
	.balign 2
.globl _keywin_on
	.def	_keywin_on;	.scl	2;	.type	32;	.endef
_keywin_on:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	pushl	$1
	movl	8(%ebp), %ebx
	pushl	%ebx
	movl	16(%ebp), %esi
	call	_change_wtitle8
	cmpl	12(%ebp), %ebx
	popl	%eax
	popl	%edx
	je	L116
	testb	$32, 28(%ebx)
	jne	L117
L114:
	leal	-8(%ebp), %esp
	movl	%esi, %eax
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
L117:
	pushl	$2
	movl	36(%ebx), %eax
	addl	$16, %eax
	pushl	%eax
	call	_fifo32_put
	popl	%ecx
	popl	%ebx
	jmp	L114
L116:
	xorl	%esi, %esi
	jmp	L114
	.def	_change_wtitle8;	.scl	2;	.type	32;	.endef
	.def	_mouse_decode;	.scl	2;	.type	32;	.endef
	.def	_sheet_refresh;	.scl	2;	.type	32;	.endef
	.def	_boxfill8;	.scl	2;	.type	32;	.endef
	.def	_asm_end_app;	.scl	2;	.type	32;	.endef
	.def	_cons_putstr0;	.scl	2;	.type	32;	.endef
	.def	_keywin_off;	.scl	2;	.type	32;	.endef
	.def	_putfonts8_asc_sht;	.scl	2;	.type	32;	.endef
	.def	_keywin_on;	.scl	2;	.type	32;	.endef
	.def	_task_sleep;	.scl	2;	.type	32;	.endef
	.def	_io_cli;	.scl	2;	.type	32;	.endef
	.def	_wait_KBC_sendready;	.scl	2;	.type	32;	.endef
	.def	_fifo32_get;	.scl	2;	.type	32;	.endef
	.def	_fifo32_status;	.scl	2;	.type	32;	.endef
	.def	_fifo32_put;	.scl	2;	.type	32;	.endef
	.def	_sheet_updown;	.scl	2;	.type	32;	.endef
	.def	_sheet_slide;	.scl	2;	.type	32;	.endef
	.def	_init_mouse_cursor8;	.scl	2;	.type	32;	.endef
	.def	_timer_settime;	.scl	2;	.type	32;	.endef
	.def	_timer_init;	.scl	2;	.type	32;	.endef
	.def	_timer_alloc;	.scl	2;	.type	32;	.endef
	.def	_console_task;	.scl	2;	.type	32;	.endef
	.def	_task_alloc;	.scl	2;	.type	32;	.endef
	.def	_make_textbox8;	.scl	2;	.type	32;	.endef
	.def	_make_window8;	.scl	2;	.type	32;	.endef
	.def	_init_screen8;	.scl	2;	.type	32;	.endef
	.def	_sheet_setbuf;	.scl	2;	.type	32;	.endef
	.def	_memman_alloc_4k;	.scl	2;	.type	32;	.endef
	.def	_sheet_alloc;	.scl	2;	.type	32;	.endef
	.def	_task_run;	.scl	2;	.type	32;	.endef
	.def	_task_init;	.scl	2;	.type	32;	.endef
	.def	_shtctl_init;	.scl	2;	.type	32;	.endef
	.def	_init_palette;	.scl	2;	.type	32;	.endef
	.def	_memman_free;	.scl	2;	.type	32;	.endef
	.def	_memman_init;	.scl	2;	.type	32;	.endef
	.def	_memtest;	.scl	2;	.type	32;	.endef
	.def	_io_out8;	.scl	2;	.type	32;	.endef
	.def	_enable_mouse;	.scl	2;	.type	32;	.endef
	.def	_init_keyboard;	.scl	2;	.type	32;	.endef
	.def	_init_pit;	.scl	2;	.type	32;	.endef
	.def	_fifo32_init;	.scl	2;	.type	32;	.endef
	.def	_io_sti;	.scl	2;	.type	32;	.endef
	.def	_init_pic;	.scl	2;	.type	32;	.endef
	.def	_init_gdtidt;	.scl	2;	.type	32;	.endef
